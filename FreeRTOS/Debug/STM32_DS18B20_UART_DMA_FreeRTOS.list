
STM32_DS18B20_UART_DMA_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c48  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db4  08002db4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002db4  08002db4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002db4  08002db4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002db4  08002db4  00012db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000108c  20000010  08002dcc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000109c  08002dcc  0002109c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be61  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002434  00000000  00000000  0002be9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b40  00000000  00000000  0002e2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a08  00000000  00000000  0002ee10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014f19  00000000  00000000  0002f818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009f6f  00000000  00000000  00044731  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071702  00000000  00000000  0004e6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bfda2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b64  00000000  00000000  000bfe20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08002d40 	.word	0x08002d40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08002d40 	.word	0x08002d40

08000150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <HAL_Init+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a07      	ldr	r2, [pc, #28]	; (8000178 <HAL_Init+0x28>)
 800015a:	f043 0310 	orr.w	r3, r3, #16
 800015e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000160:	2003      	movs	r0, #3
 8000162:	f000 f923 	bl	80003ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000166:	200f      	movs	r0, #15
 8000168:	f000 f808 	bl	800017c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800016c:	f002 fc30 	bl	80029d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000170:	2300      	movs	r3, #0
}
 8000172:	4618      	mov	r0, r3
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40022000 	.word	0x40022000

0800017c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x54>)
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	4b12      	ldr	r3, [pc, #72]	; (80001d4 <HAL_InitTick+0x58>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	4619      	mov	r1, r3
 800018e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000192:	fbb3 f3f1 	udiv	r3, r3, r1
 8000196:	fbb2 f3f3 	udiv	r3, r2, r3
 800019a:	4618      	mov	r0, r3
 800019c:	f000 f93b 	bl	8000416 <HAL_SYSTICK_Config>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e00e      	b.n	80001c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2b0f      	cmp	r3, #15
 80001ae:	d80a      	bhi.n	80001c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001b0:	2200      	movs	r2, #0
 80001b2:	6879      	ldr	r1, [r7, #4]
 80001b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b8:	f000 f903 	bl	80003c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001bc:	4a06      	ldr	r2, [pc, #24]	; (80001d8 <HAL_InitTick+0x5c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001c2:	2300      	movs	r3, #0
 80001c4:	e000      	b.n	80001c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c6:	2301      	movs	r3, #1
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3708      	adds	r7, #8
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	2000000c 	.word	0x2000000c
 80001d4:	20000004 	.word	0x20000004
 80001d8:	20000000 	.word	0x20000000

080001dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x1c>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	461a      	mov	r2, r3
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <HAL_IncTick+0x20>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4413      	add	r3, r2
 80001ec:	4a03      	ldr	r2, [pc, #12]	; (80001fc <HAL_IncTick+0x20>)
 80001ee:	6013      	str	r3, [r2, #0]
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	20000004 	.word	0x20000004
 80001fc:	20000fcc 	.word	0x20000fcc

08000200 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
  return uwTick;
 8000204:	4b02      	ldr	r3, [pc, #8]	; (8000210 <HAL_GetTick+0x10>)
 8000206:	681b      	ldr	r3, [r3, #0]
}
 8000208:	4618      	mov	r0, r3
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	20000fcc 	.word	0x20000fcc

08000214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f003 0307 	and.w	r3, r3, #7
 8000222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__NVIC_SetPriorityGrouping+0x44>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800022a:	68ba      	ldr	r2, [r7, #8]
 800022c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000230:	4013      	ands	r3, r2
 8000232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800023c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000246:	4a04      	ldr	r2, [pc, #16]	; (8000258 <__NVIC_SetPriorityGrouping+0x44>)
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	60d3      	str	r3, [r2, #12]
}
 800024c:	bf00      	nop
 800024e:	3714      	adds	r7, #20
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	e000ed00 	.word	0xe000ed00

0800025c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <__NVIC_GetPriorityGrouping+0x18>)
 8000262:	68db      	ldr	r3, [r3, #12]
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	f003 0307 	and.w	r3, r3, #7
}
 800026a:	4618      	mov	r0, r3
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000286:	2b00      	cmp	r3, #0
 8000288:	db0b      	blt.n	80002a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	f003 021f 	and.w	r2, r3, #31
 8000290:	4906      	ldr	r1, [pc, #24]	; (80002ac <__NVIC_EnableIRQ+0x34>)
 8000292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000296:	095b      	lsrs	r3, r3, #5
 8000298:	2001      	movs	r0, #1
 800029a:	fa00 f202 	lsl.w	r2, r0, r2
 800029e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	6039      	str	r1, [r7, #0]
 80002ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	db0a      	blt.n	80002da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	490c      	ldr	r1, [pc, #48]	; (80002fc <__NVIC_SetPriority+0x4c>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	0112      	lsls	r2, r2, #4
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	440b      	add	r3, r1
 80002d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d8:	e00a      	b.n	80002f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4908      	ldr	r1, [pc, #32]	; (8000300 <__NVIC_SetPriority+0x50>)
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	f003 030f 	and.w	r3, r3, #15
 80002e6:	3b04      	subs	r3, #4
 80002e8:	0112      	lsls	r2, r2, #4
 80002ea:	b2d2      	uxtb	r2, r2
 80002ec:	440b      	add	r3, r1
 80002ee:	761a      	strb	r2, [r3, #24]
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	e000e100 	.word	0xe000e100
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000304:	b480      	push	{r7}
 8000306:	b089      	sub	sp, #36	; 0x24
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	f003 0307 	and.w	r3, r3, #7
 8000316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000318:	69fb      	ldr	r3, [r7, #28]
 800031a:	f1c3 0307 	rsb	r3, r3, #7
 800031e:	2b04      	cmp	r3, #4
 8000320:	bf28      	it	cs
 8000322:	2304      	movcs	r3, #4
 8000324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000326:	69fb      	ldr	r3, [r7, #28]
 8000328:	3304      	adds	r3, #4
 800032a:	2b06      	cmp	r3, #6
 800032c:	d902      	bls.n	8000334 <NVIC_EncodePriority+0x30>
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3b03      	subs	r3, #3
 8000332:	e000      	b.n	8000336 <NVIC_EncodePriority+0x32>
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800033c:	69bb      	ldr	r3, [r7, #24]
 800033e:	fa02 f303 	lsl.w	r3, r2, r3
 8000342:	43da      	mvns	r2, r3
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	401a      	ands	r2, r3
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800034c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	43d9      	mvns	r1, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800035c:	4313      	orrs	r3, r2
         );
}
 800035e:	4618      	mov	r0, r3
 8000360:	3724      	adds	r7, #36	; 0x24
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	3b01      	subs	r3, #1
 8000374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000378:	d301      	bcc.n	800037e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800037a:	2301      	movs	r3, #1
 800037c:	e00f      	b.n	800039e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037e:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <SysTick_Config+0x40>)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3b01      	subs	r3, #1
 8000384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000386:	210f      	movs	r1, #15
 8000388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800038c:	f7ff ff90 	bl	80002b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <SysTick_Config+0x40>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000396:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <SysTick_Config+0x40>)
 8000398:	2207      	movs	r2, #7
 800039a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800039c:	2300      	movs	r3, #0
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	e000e010 	.word	0xe000e010

080003ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b4:	6878      	ldr	r0, [r7, #4]
 80003b6:	f7ff ff2d 	bl	8000214 <__NVIC_SetPriorityGrouping>
}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b086      	sub	sp, #24
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	4603      	mov	r3, r0
 80003ca:	60b9      	str	r1, [r7, #8]
 80003cc:	607a      	str	r2, [r7, #4]
 80003ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d4:	f7ff ff42 	bl	800025c <__NVIC_GetPriorityGrouping>
 80003d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	68b9      	ldr	r1, [r7, #8]
 80003de:	6978      	ldr	r0, [r7, #20]
 80003e0:	f7ff ff90 	bl	8000304 <NVIC_EncodePriority>
 80003e4:	4602      	mov	r2, r0
 80003e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003ea:	4611      	mov	r1, r2
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff5f 	bl	80002b0 <__NVIC_SetPriority>
}
 80003f2:	bf00      	nop
 80003f4:	3718      	adds	r7, #24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b082      	sub	sp, #8
 80003fe:	af00      	add	r7, sp, #0
 8000400:	4603      	mov	r3, r0
 8000402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff ff35 	bl	8000278 <__NVIC_EnableIRQ>
}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b082      	sub	sp, #8
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f7ff ffa2 	bl	8000368 <SysTick_Config>
 8000424:	4603      	mov	r3, r0
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000430:	b480      	push	{r7}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d101      	bne.n	8000446 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000442:	2301      	movs	r3, #1
 8000444:	e043      	b.n	80004ce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	461a      	mov	r2, r3
 800044c:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <HAL_DMA_Init+0xa8>)
 800044e:	4413      	add	r3, r2
 8000450:	4a22      	ldr	r2, [pc, #136]	; (80004dc <HAL_DMA_Init+0xac>)
 8000452:	fba2 2303 	umull	r2, r3, r2, r3
 8000456:	091b      	lsrs	r3, r3, #4
 8000458:	009a      	lsls	r2, r3, #2
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a1f      	ldr	r2, [pc, #124]	; (80004e0 <HAL_DMA_Init+0xb0>)
 8000462:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2202      	movs	r2, #2
 8000468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800047a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800047e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000488:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000494:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	4313      	orrs	r3, r2
 80004ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	68fa      	ldr	r2, [r7, #12]
 80004b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2200      	movs	r2, #0
 80004ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2201      	movs	r2, #1
 80004c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2200      	movs	r2, #0
 80004c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80004cc:	2300      	movs	r3, #0
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	bffdfff8 	.word	0xbffdfff8
 80004dc:	cccccccd 	.word	0xcccccccd
 80004e0:	40020000 	.word	0x40020000

080004e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000500:	2204      	movs	r2, #4
 8000502:	409a      	lsls	r2, r3
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	4013      	ands	r3, r2
 8000508:	2b00      	cmp	r3, #0
 800050a:	d04f      	beq.n	80005ac <HAL_DMA_IRQHandler+0xc8>
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	2b00      	cmp	r3, #0
 8000514:	d04a      	beq.n	80005ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f003 0320 	and.w	r3, r3, #32
 8000520:	2b00      	cmp	r3, #0
 8000522:	d107      	bne.n	8000534 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f022 0204 	bic.w	r2, r2, #4
 8000532:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a66      	ldr	r2, [pc, #408]	; (80006d4 <HAL_DMA_IRQHandler+0x1f0>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d029      	beq.n	8000592 <HAL_DMA_IRQHandler+0xae>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a65      	ldr	r2, [pc, #404]	; (80006d8 <HAL_DMA_IRQHandler+0x1f4>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d022      	beq.n	800058e <HAL_DMA_IRQHandler+0xaa>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a63      	ldr	r2, [pc, #396]	; (80006dc <HAL_DMA_IRQHandler+0x1f8>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d01a      	beq.n	8000588 <HAL_DMA_IRQHandler+0xa4>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a62      	ldr	r2, [pc, #392]	; (80006e0 <HAL_DMA_IRQHandler+0x1fc>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d012      	beq.n	8000582 <HAL_DMA_IRQHandler+0x9e>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a60      	ldr	r2, [pc, #384]	; (80006e4 <HAL_DMA_IRQHandler+0x200>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d00a      	beq.n	800057c <HAL_DMA_IRQHandler+0x98>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a5f      	ldr	r2, [pc, #380]	; (80006e8 <HAL_DMA_IRQHandler+0x204>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d102      	bne.n	8000576 <HAL_DMA_IRQHandler+0x92>
 8000570:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000574:	e00e      	b.n	8000594 <HAL_DMA_IRQHandler+0xb0>
 8000576:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800057a:	e00b      	b.n	8000594 <HAL_DMA_IRQHandler+0xb0>
 800057c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000580:	e008      	b.n	8000594 <HAL_DMA_IRQHandler+0xb0>
 8000582:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000586:	e005      	b.n	8000594 <HAL_DMA_IRQHandler+0xb0>
 8000588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800058c:	e002      	b.n	8000594 <HAL_DMA_IRQHandler+0xb0>
 800058e:	2340      	movs	r3, #64	; 0x40
 8000590:	e000      	b.n	8000594 <HAL_DMA_IRQHandler+0xb0>
 8000592:	2304      	movs	r3, #4
 8000594:	4a55      	ldr	r2, [pc, #340]	; (80006ec <HAL_DMA_IRQHandler+0x208>)
 8000596:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800059c:	2b00      	cmp	r3, #0
 800059e:	f000 8094 	beq.w	80006ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80005aa:	e08e      	b.n	80006ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	2202      	movs	r2, #2
 80005b2:	409a      	lsls	r2, r3
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	4013      	ands	r3, r2
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d056      	beq.n	800066a <HAL_DMA_IRQHandler+0x186>
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d051      	beq.n	800066a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f003 0320 	and.w	r3, r3, #32
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d10b      	bne.n	80005ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f022 020a 	bic.w	r2, r2, #10
 80005e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2201      	movs	r2, #1
 80005e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a38      	ldr	r2, [pc, #224]	; (80006d4 <HAL_DMA_IRQHandler+0x1f0>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d029      	beq.n	800064a <HAL_DMA_IRQHandler+0x166>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a37      	ldr	r2, [pc, #220]	; (80006d8 <HAL_DMA_IRQHandler+0x1f4>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d022      	beq.n	8000646 <HAL_DMA_IRQHandler+0x162>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a35      	ldr	r2, [pc, #212]	; (80006dc <HAL_DMA_IRQHandler+0x1f8>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d01a      	beq.n	8000640 <HAL_DMA_IRQHandler+0x15c>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a34      	ldr	r2, [pc, #208]	; (80006e0 <HAL_DMA_IRQHandler+0x1fc>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d012      	beq.n	800063a <HAL_DMA_IRQHandler+0x156>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <HAL_DMA_IRQHandler+0x200>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d00a      	beq.n	8000634 <HAL_DMA_IRQHandler+0x150>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a31      	ldr	r2, [pc, #196]	; (80006e8 <HAL_DMA_IRQHandler+0x204>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d102      	bne.n	800062e <HAL_DMA_IRQHandler+0x14a>
 8000628:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800062c:	e00e      	b.n	800064c <HAL_DMA_IRQHandler+0x168>
 800062e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000632:	e00b      	b.n	800064c <HAL_DMA_IRQHandler+0x168>
 8000634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000638:	e008      	b.n	800064c <HAL_DMA_IRQHandler+0x168>
 800063a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063e:	e005      	b.n	800064c <HAL_DMA_IRQHandler+0x168>
 8000640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000644:	e002      	b.n	800064c <HAL_DMA_IRQHandler+0x168>
 8000646:	2320      	movs	r3, #32
 8000648:	e000      	b.n	800064c <HAL_DMA_IRQHandler+0x168>
 800064a:	2302      	movs	r3, #2
 800064c:	4a27      	ldr	r2, [pc, #156]	; (80006ec <HAL_DMA_IRQHandler+0x208>)
 800064e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800065c:	2b00      	cmp	r3, #0
 800065e:	d034      	beq.n	80006ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000668:	e02f      	b.n	80006ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	2208      	movs	r2, #8
 8000670:	409a      	lsls	r2, r3
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	4013      	ands	r3, r2
 8000676:	2b00      	cmp	r3, #0
 8000678:	d028      	beq.n	80006cc <HAL_DMA_IRQHandler+0x1e8>
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	f003 0308 	and.w	r3, r3, #8
 8000680:	2b00      	cmp	r3, #0
 8000682:	d023      	beq.n	80006cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f022 020e 	bic.w	r2, r2, #14
 8000692:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800069c:	2101      	movs	r1, #1
 800069e:	fa01 f202 	lsl.w	r2, r1, r2
 80006a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2201      	movs	r2, #1
 80006a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2201      	movs	r2, #1
 80006ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d004      	beq.n	80006cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	4798      	blx	r3
    }
  }
  return;
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
}
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40020008 	.word	0x40020008
 80006d8:	4002001c 	.word	0x4002001c
 80006dc:	40020030 	.word	0x40020030
 80006e0:	40020044 	.word	0x40020044
 80006e4:	40020058 	.word	0x40020058
 80006e8:	4002006c 	.word	0x4002006c
 80006ec:	40020000 	.word	0x40020000

080006f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b08b      	sub	sp, #44	; 0x2c
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000702:	e127      	b.n	8000954 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000704:	2201      	movs	r2, #1
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	69fa      	ldr	r2, [r7, #28]
 8000714:	4013      	ands	r3, r2
 8000716:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000718:	69ba      	ldr	r2, [r7, #24]
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	429a      	cmp	r2, r3
 800071e:	f040 8116 	bne.w	800094e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	2b12      	cmp	r3, #18
 8000728:	d034      	beq.n	8000794 <HAL_GPIO_Init+0xa4>
 800072a:	2b12      	cmp	r3, #18
 800072c:	d80d      	bhi.n	800074a <HAL_GPIO_Init+0x5a>
 800072e:	2b02      	cmp	r3, #2
 8000730:	d02b      	beq.n	800078a <HAL_GPIO_Init+0x9a>
 8000732:	2b02      	cmp	r3, #2
 8000734:	d804      	bhi.n	8000740 <HAL_GPIO_Init+0x50>
 8000736:	2b00      	cmp	r3, #0
 8000738:	d031      	beq.n	800079e <HAL_GPIO_Init+0xae>
 800073a:	2b01      	cmp	r3, #1
 800073c:	d01c      	beq.n	8000778 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800073e:	e048      	b.n	80007d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000740:	2b03      	cmp	r3, #3
 8000742:	d043      	beq.n	80007cc <HAL_GPIO_Init+0xdc>
 8000744:	2b11      	cmp	r3, #17
 8000746:	d01b      	beq.n	8000780 <HAL_GPIO_Init+0x90>
          break;
 8000748:	e043      	b.n	80007d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800074a:	4a89      	ldr	r2, [pc, #548]	; (8000970 <HAL_GPIO_Init+0x280>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d026      	beq.n	800079e <HAL_GPIO_Init+0xae>
 8000750:	4a87      	ldr	r2, [pc, #540]	; (8000970 <HAL_GPIO_Init+0x280>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d806      	bhi.n	8000764 <HAL_GPIO_Init+0x74>
 8000756:	4a87      	ldr	r2, [pc, #540]	; (8000974 <HAL_GPIO_Init+0x284>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d020      	beq.n	800079e <HAL_GPIO_Init+0xae>
 800075c:	4a86      	ldr	r2, [pc, #536]	; (8000978 <HAL_GPIO_Init+0x288>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d01d      	beq.n	800079e <HAL_GPIO_Init+0xae>
          break;
 8000762:	e036      	b.n	80007d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000764:	4a85      	ldr	r2, [pc, #532]	; (800097c <HAL_GPIO_Init+0x28c>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d019      	beq.n	800079e <HAL_GPIO_Init+0xae>
 800076a:	4a85      	ldr	r2, [pc, #532]	; (8000980 <HAL_GPIO_Init+0x290>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d016      	beq.n	800079e <HAL_GPIO_Init+0xae>
 8000770:	4a84      	ldr	r2, [pc, #528]	; (8000984 <HAL_GPIO_Init+0x294>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d013      	beq.n	800079e <HAL_GPIO_Init+0xae>
          break;
 8000776:	e02c      	b.n	80007d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	623b      	str	r3, [r7, #32]
          break;
 800077e:	e028      	b.n	80007d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	3304      	adds	r3, #4
 8000786:	623b      	str	r3, [r7, #32]
          break;
 8000788:	e023      	b.n	80007d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	3308      	adds	r3, #8
 8000790:	623b      	str	r3, [r7, #32]
          break;
 8000792:	e01e      	b.n	80007d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	330c      	adds	r3, #12
 800079a:	623b      	str	r3, [r7, #32]
          break;
 800079c:	e019      	b.n	80007d2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d102      	bne.n	80007ac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007a6:	2304      	movs	r3, #4
 80007a8:	623b      	str	r3, [r7, #32]
          break;
 80007aa:	e012      	b.n	80007d2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d105      	bne.n	80007c0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007b4:	2308      	movs	r3, #8
 80007b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	69fa      	ldr	r2, [r7, #28]
 80007bc:	611a      	str	r2, [r3, #16]
          break;
 80007be:	e008      	b.n	80007d2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007c0:	2308      	movs	r3, #8
 80007c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	69fa      	ldr	r2, [r7, #28]
 80007c8:	615a      	str	r2, [r3, #20]
          break;
 80007ca:	e002      	b.n	80007d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
          break;
 80007d0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	2bff      	cmp	r3, #255	; 0xff
 80007d6:	d801      	bhi.n	80007dc <HAL_GPIO_Init+0xec>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	e001      	b.n	80007e0 <HAL_GPIO_Init+0xf0>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3304      	adds	r3, #4
 80007e0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	2bff      	cmp	r3, #255	; 0xff
 80007e6:	d802      	bhi.n	80007ee <HAL_GPIO_Init+0xfe>
 80007e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	e002      	b.n	80007f4 <HAL_GPIO_Init+0x104>
 80007ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f0:	3b08      	subs	r3, #8
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	210f      	movs	r1, #15
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	43db      	mvns	r3, r3
 8000804:	401a      	ands	r2, r3
 8000806:	6a39      	ldr	r1, [r7, #32]
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	431a      	orrs	r2, r3
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081c:	2b00      	cmp	r3, #0
 800081e:	f000 8096 	beq.w	800094e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000822:	4b59      	ldr	r3, [pc, #356]	; (8000988 <HAL_GPIO_Init+0x298>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	4a58      	ldr	r2, [pc, #352]	; (8000988 <HAL_GPIO_Init+0x298>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6193      	str	r3, [r2, #24]
 800082e:	4b56      	ldr	r3, [pc, #344]	; (8000988 <HAL_GPIO_Init+0x298>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800083a:	4a54      	ldr	r2, [pc, #336]	; (800098c <HAL_GPIO_Init+0x29c>)
 800083c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083e:	089b      	lsrs	r3, r3, #2
 8000840:	3302      	adds	r3, #2
 8000842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000846:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084a:	f003 0303 	and.w	r3, r3, #3
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	220f      	movs	r2, #15
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	43db      	mvns	r3, r3
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	4013      	ands	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a4b      	ldr	r2, [pc, #300]	; (8000990 <HAL_GPIO_Init+0x2a0>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d013      	beq.n	800088e <HAL_GPIO_Init+0x19e>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a4a      	ldr	r2, [pc, #296]	; (8000994 <HAL_GPIO_Init+0x2a4>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d00d      	beq.n	800088a <HAL_GPIO_Init+0x19a>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a49      	ldr	r2, [pc, #292]	; (8000998 <HAL_GPIO_Init+0x2a8>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d007      	beq.n	8000886 <HAL_GPIO_Init+0x196>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a48      	ldr	r2, [pc, #288]	; (800099c <HAL_GPIO_Init+0x2ac>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d101      	bne.n	8000882 <HAL_GPIO_Init+0x192>
 800087e:	2303      	movs	r3, #3
 8000880:	e006      	b.n	8000890 <HAL_GPIO_Init+0x1a0>
 8000882:	2304      	movs	r3, #4
 8000884:	e004      	b.n	8000890 <HAL_GPIO_Init+0x1a0>
 8000886:	2302      	movs	r3, #2
 8000888:	e002      	b.n	8000890 <HAL_GPIO_Init+0x1a0>
 800088a:	2301      	movs	r3, #1
 800088c:	e000      	b.n	8000890 <HAL_GPIO_Init+0x1a0>
 800088e:	2300      	movs	r3, #0
 8000890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000892:	f002 0203 	and.w	r2, r2, #3
 8000896:	0092      	lsls	r2, r2, #2
 8000898:	4093      	lsls	r3, r2
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	4313      	orrs	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008a0:	493a      	ldr	r1, [pc, #232]	; (800098c <HAL_GPIO_Init+0x29c>)
 80008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a4:	089b      	lsrs	r3, r3, #2
 80008a6:	3302      	adds	r3, #2
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d006      	beq.n	80008c8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008ba:	4b39      	ldr	r3, [pc, #228]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	4938      	ldr	r1, [pc, #224]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	600b      	str	r3, [r1, #0]
 80008c6:	e006      	b.n	80008d6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008c8:	4b35      	ldr	r3, [pc, #212]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	43db      	mvns	r3, r3
 80008d0:	4933      	ldr	r1, [pc, #204]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 80008d2:	4013      	ands	r3, r2
 80008d4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d006      	beq.n	80008f0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008e2:	4b2f      	ldr	r3, [pc, #188]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	492e      	ldr	r1, [pc, #184]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	604b      	str	r3, [r1, #4]
 80008ee:	e006      	b.n	80008fe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008f0:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	43db      	mvns	r3, r3
 80008f8:	4929      	ldr	r1, [pc, #164]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 80008fa:	4013      	ands	r3, r2
 80008fc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d006      	beq.n	8000918 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	4924      	ldr	r1, [pc, #144]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	4313      	orrs	r3, r2
 8000914:	608b      	str	r3, [r1, #8]
 8000916:	e006      	b.n	8000926 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000918:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	43db      	mvns	r3, r3
 8000920:	491f      	ldr	r1, [pc, #124]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 8000922:	4013      	ands	r3, r2
 8000924:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800092e:	2b00      	cmp	r3, #0
 8000930:	d006      	beq.n	8000940 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 8000934:	68da      	ldr	r2, [r3, #12]
 8000936:	491a      	ldr	r1, [pc, #104]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	4313      	orrs	r3, r2
 800093c:	60cb      	str	r3, [r1, #12]
 800093e:	e006      	b.n	800094e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 8000942:	68da      	ldr	r2, [r3, #12]
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	43db      	mvns	r3, r3
 8000948:	4915      	ldr	r1, [pc, #84]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 800094a:	4013      	ands	r3, r2
 800094c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	3301      	adds	r3, #1
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095a:	fa22 f303 	lsr.w	r3, r2, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	f47f aed0 	bne.w	8000704 <HAL_GPIO_Init+0x14>
  }
}
 8000964:	bf00      	nop
 8000966:	372c      	adds	r7, #44	; 0x2c
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	10210000 	.word	0x10210000
 8000974:	10110000 	.word	0x10110000
 8000978:	10120000 	.word	0x10120000
 800097c:	10310000 	.word	0x10310000
 8000980:	10320000 	.word	0x10320000
 8000984:	10220000 	.word	0x10220000
 8000988:	40021000 	.word	0x40021000
 800098c:	40010000 	.word	0x40010000
 8000990:	40010800 	.word	0x40010800
 8000994:	40010c00 	.word	0x40010c00
 8000998:	40011000 	.word	0x40011000
 800099c:	40011400 	.word	0x40011400
 80009a0:	40010400 	.word	0x40010400

080009a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d101      	bne.n	80009b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e26c      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f000 8087 	beq.w	8000ad2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009c4:	4b92      	ldr	r3, [pc, #584]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f003 030c 	and.w	r3, r3, #12
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	d00c      	beq.n	80009ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009d0:	4b8f      	ldr	r3, [pc, #572]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 030c 	and.w	r3, r3, #12
 80009d8:	2b08      	cmp	r3, #8
 80009da:	d112      	bne.n	8000a02 <HAL_RCC_OscConfig+0x5e>
 80009dc:	4b8c      	ldr	r3, [pc, #560]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009e8:	d10b      	bne.n	8000a02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009ea:	4b89      	ldr	r3, [pc, #548]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d06c      	beq.n	8000ad0 <HAL_RCC_OscConfig+0x12c>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d168      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e246      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a0a:	d106      	bne.n	8000a1a <HAL_RCC_OscConfig+0x76>
 8000a0c:	4b80      	ldr	r3, [pc, #512]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a7f      	ldr	r2, [pc, #508]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	e02e      	b.n	8000a78 <HAL_RCC_OscConfig+0xd4>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d10c      	bne.n	8000a3c <HAL_RCC_OscConfig+0x98>
 8000a22:	4b7b      	ldr	r3, [pc, #492]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a7a      	ldr	r2, [pc, #488]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a2c:	6013      	str	r3, [r2, #0]
 8000a2e:	4b78      	ldr	r3, [pc, #480]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a77      	ldr	r2, [pc, #476]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a38:	6013      	str	r3, [r2, #0]
 8000a3a:	e01d      	b.n	8000a78 <HAL_RCC_OscConfig+0xd4>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a44:	d10c      	bne.n	8000a60 <HAL_RCC_OscConfig+0xbc>
 8000a46:	4b72      	ldr	r3, [pc, #456]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a71      	ldr	r2, [pc, #452]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a50:	6013      	str	r3, [r2, #0]
 8000a52:	4b6f      	ldr	r3, [pc, #444]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a6e      	ldr	r2, [pc, #440]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a5c:	6013      	str	r3, [r2, #0]
 8000a5e:	e00b      	b.n	8000a78 <HAL_RCC_OscConfig+0xd4>
 8000a60:	4b6b      	ldr	r3, [pc, #428]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a6a      	ldr	r2, [pc, #424]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	4b68      	ldr	r3, [pc, #416]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a67      	ldr	r2, [pc, #412]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d013      	beq.n	8000aa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a80:	f7ff fbbe 	bl	8000200 <HAL_GetTick>
 8000a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a86:	e008      	b.n	8000a9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a88:	f7ff fbba 	bl	8000200 <HAL_GetTick>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	2b64      	cmp	r3, #100	; 0x64
 8000a94:	d901      	bls.n	8000a9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000a96:	2303      	movs	r3, #3
 8000a98:	e1fa      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a9a:	4b5d      	ldr	r3, [pc, #372]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d0f0      	beq.n	8000a88 <HAL_RCC_OscConfig+0xe4>
 8000aa6:	e014      	b.n	8000ad2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aa8:	f7ff fbaa 	bl	8000200 <HAL_GetTick>
 8000aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aae:	e008      	b.n	8000ac2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ab0:	f7ff fba6 	bl	8000200 <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	2b64      	cmp	r3, #100	; 0x64
 8000abc:	d901      	bls.n	8000ac2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	e1e6      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ac2:	4b53      	ldr	r3, [pc, #332]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1f0      	bne.n	8000ab0 <HAL_RCC_OscConfig+0x10c>
 8000ace:	e000      	b.n	8000ad2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d063      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ade:	4b4c      	ldr	r3, [pc, #304]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f003 030c 	and.w	r3, r3, #12
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d00b      	beq.n	8000b02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000aea:	4b49      	ldr	r3, [pc, #292]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f003 030c 	and.w	r3, r3, #12
 8000af2:	2b08      	cmp	r3, #8
 8000af4:	d11c      	bne.n	8000b30 <HAL_RCC_OscConfig+0x18c>
 8000af6:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d116      	bne.n	8000b30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b02:	4b43      	ldr	r3, [pc, #268]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d005      	beq.n	8000b1a <HAL_RCC_OscConfig+0x176>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	691b      	ldr	r3, [r3, #16]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d001      	beq.n	8000b1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e1ba      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b1a:	4b3d      	ldr	r3, [pc, #244]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	4939      	ldr	r1, [pc, #228]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b2e:	e03a      	b.n	8000ba6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	691b      	ldr	r3, [r3, #16]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d020      	beq.n	8000b7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b38:	4b36      	ldr	r3, [pc, #216]	; (8000c14 <HAL_RCC_OscConfig+0x270>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b3e:	f7ff fb5f 	bl	8000200 <HAL_GetTick>
 8000b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b44:	e008      	b.n	8000b58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b46:	f7ff fb5b 	bl	8000200 <HAL_GetTick>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d901      	bls.n	8000b58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000b54:	2303      	movs	r3, #3
 8000b56:	e19b      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b58:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f003 0302 	and.w	r3, r3, #2
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f0      	beq.n	8000b46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	4927      	ldr	r1, [pc, #156]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000b74:	4313      	orrs	r3, r2
 8000b76:	600b      	str	r3, [r1, #0]
 8000b78:	e015      	b.n	8000ba6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b7a:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <HAL_RCC_OscConfig+0x270>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b80:	f7ff fb3e 	bl	8000200 <HAL_GetTick>
 8000b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b86:	e008      	b.n	8000b9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b88:	f7ff fb3a 	bl	8000200 <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d901      	bls.n	8000b9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000b96:	2303      	movs	r3, #3
 8000b98:	e17a      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1f0      	bne.n	8000b88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d03a      	beq.n	8000c28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d019      	beq.n	8000bee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_RCC_OscConfig+0x274>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bc0:	f7ff fb1e 	bl	8000200 <HAL_GetTick>
 8000bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bc6:	e008      	b.n	8000bda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bc8:	f7ff fb1a 	bl	8000200 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d901      	bls.n	8000bda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e15a      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d0f0      	beq.n	8000bc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f000 fada 	bl	80011a0 <RCC_Delay>
 8000bec:	e01c      	b.n	8000c28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_RCC_OscConfig+0x274>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bf4:	f7ff fb04 	bl	8000200 <HAL_GetTick>
 8000bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bfa:	e00f      	b.n	8000c1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bfc:	f7ff fb00 	bl	8000200 <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d908      	bls.n	8000c1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e140      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000
 8000c14:	42420000 	.word	0x42420000
 8000c18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c1c:	4b9e      	ldr	r3, [pc, #632]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1e9      	bne.n	8000bfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 80a6 	beq.w	8000d82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c3a:	4b97      	ldr	r3, [pc, #604]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d10d      	bne.n	8000c62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b94      	ldr	r3, [pc, #592]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	4a93      	ldr	r2, [pc, #588]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	61d3      	str	r3, [r2, #28]
 8000c52:	4b91      	ldr	r3, [pc, #580]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c62:	4b8e      	ldr	r3, [pc, #568]	; (8000e9c <HAL_RCC_OscConfig+0x4f8>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d118      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c6e:	4b8b      	ldr	r3, [pc, #556]	; (8000e9c <HAL_RCC_OscConfig+0x4f8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a8a      	ldr	r2, [pc, #552]	; (8000e9c <HAL_RCC_OscConfig+0x4f8>)
 8000c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c7a:	f7ff fac1 	bl	8000200 <HAL_GetTick>
 8000c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c80:	e008      	b.n	8000c94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c82:	f7ff fabd 	bl	8000200 <HAL_GetTick>
 8000c86:	4602      	mov	r2, r0
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	2b64      	cmp	r3, #100	; 0x64
 8000c8e:	d901      	bls.n	8000c94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000c90:	2303      	movs	r3, #3
 8000c92:	e0fd      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c94:	4b81      	ldr	r3, [pc, #516]	; (8000e9c <HAL_RCC_OscConfig+0x4f8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f0      	beq.n	8000c82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d106      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x312>
 8000ca8:	4b7b      	ldr	r3, [pc, #492]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000caa:	6a1b      	ldr	r3, [r3, #32]
 8000cac:	4a7a      	ldr	r2, [pc, #488]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6213      	str	r3, [r2, #32]
 8000cb4:	e02d      	b.n	8000d12 <HAL_RCC_OscConfig+0x36e>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d10c      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x334>
 8000cbe:	4b76      	ldr	r3, [pc, #472]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000cc0:	6a1b      	ldr	r3, [r3, #32]
 8000cc2:	4a75      	ldr	r2, [pc, #468]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000cc4:	f023 0301 	bic.w	r3, r3, #1
 8000cc8:	6213      	str	r3, [r2, #32]
 8000cca:	4b73      	ldr	r3, [pc, #460]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000ccc:	6a1b      	ldr	r3, [r3, #32]
 8000cce:	4a72      	ldr	r2, [pc, #456]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000cd0:	f023 0304 	bic.w	r3, r3, #4
 8000cd4:	6213      	str	r3, [r2, #32]
 8000cd6:	e01c      	b.n	8000d12 <HAL_RCC_OscConfig+0x36e>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	2b05      	cmp	r3, #5
 8000cde:	d10c      	bne.n	8000cfa <HAL_RCC_OscConfig+0x356>
 8000ce0:	4b6d      	ldr	r3, [pc, #436]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000ce2:	6a1b      	ldr	r3, [r3, #32]
 8000ce4:	4a6c      	ldr	r2, [pc, #432]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000ce6:	f043 0304 	orr.w	r3, r3, #4
 8000cea:	6213      	str	r3, [r2, #32]
 8000cec:	4b6a      	ldr	r3, [pc, #424]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000cee:	6a1b      	ldr	r3, [r3, #32]
 8000cf0:	4a69      	ldr	r2, [pc, #420]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6213      	str	r3, [r2, #32]
 8000cf8:	e00b      	b.n	8000d12 <HAL_RCC_OscConfig+0x36e>
 8000cfa:	4b67      	ldr	r3, [pc, #412]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000cfc:	6a1b      	ldr	r3, [r3, #32]
 8000cfe:	4a66      	ldr	r2, [pc, #408]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000d00:	f023 0301 	bic.w	r3, r3, #1
 8000d04:	6213      	str	r3, [r2, #32]
 8000d06:	4b64      	ldr	r3, [pc, #400]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000d08:	6a1b      	ldr	r3, [r3, #32]
 8000d0a:	4a63      	ldr	r2, [pc, #396]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000d0c:	f023 0304 	bic.w	r3, r3, #4
 8000d10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d015      	beq.n	8000d46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d1a:	f7ff fa71 	bl	8000200 <HAL_GetTick>
 8000d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d20:	e00a      	b.n	8000d38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d22:	f7ff fa6d 	bl	8000200 <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d901      	bls.n	8000d38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d34:	2303      	movs	r3, #3
 8000d36:	e0ab      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d38:	4b57      	ldr	r3, [pc, #348]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000d3a:	6a1b      	ldr	r3, [r3, #32]
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0ee      	beq.n	8000d22 <HAL_RCC_OscConfig+0x37e>
 8000d44:	e014      	b.n	8000d70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d46:	f7ff fa5b 	bl	8000200 <HAL_GetTick>
 8000d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d4c:	e00a      	b.n	8000d64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d4e:	f7ff fa57 	bl	8000200 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d901      	bls.n	8000d64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000d60:	2303      	movs	r3, #3
 8000d62:	e095      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d64:	4b4c      	ldr	r3, [pc, #304]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000d66:	6a1b      	ldr	r3, [r3, #32]
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1ee      	bne.n	8000d4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000d70:	7dfb      	ldrb	r3, [r7, #23]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d105      	bne.n	8000d82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d76:	4b48      	ldr	r3, [pc, #288]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	4a47      	ldr	r2, [pc, #284]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 8081 	beq.w	8000e8e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d8c:	4b42      	ldr	r3, [pc, #264]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	d061      	beq.n	8000e5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d146      	bne.n	8000e2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000da0:	4b3f      	ldr	r3, [pc, #252]	; (8000ea0 <HAL_RCC_OscConfig+0x4fc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da6:	f7ff fa2b 	bl	8000200 <HAL_GetTick>
 8000daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dac:	e008      	b.n	8000dc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dae:	f7ff fa27 	bl	8000200 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d901      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e067      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dc0:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1f0      	bne.n	8000dae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd4:	d108      	bne.n	8000de8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000dd6:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	492d      	ldr	r1, [pc, #180]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000de4:	4313      	orrs	r3, r2
 8000de6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a19      	ldr	r1, [r3, #32]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	430b      	orrs	r3, r1
 8000dfa:	4927      	ldr	r1, [pc, #156]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e00:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <HAL_RCC_OscConfig+0x4fc>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e06:	f7ff f9fb 	bl	8000200 <HAL_GetTick>
 8000e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e0e:	f7ff f9f7 	bl	8000200 <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e037      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0f0      	beq.n	8000e0e <HAL_RCC_OscConfig+0x46a>
 8000e2c:	e02f      	b.n	8000e8e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <HAL_RCC_OscConfig+0x4fc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e34:	f7ff f9e4 	bl	8000200 <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e3c:	f7ff f9e0 	bl	8000200 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e020      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f0      	bne.n	8000e3c <HAL_RCC_OscConfig+0x498>
 8000e5a:	e018      	b.n	8000e8e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d101      	bne.n	8000e68 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e013      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_RCC_OscConfig+0x4f4>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d106      	bne.n	8000e8a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d001      	beq.n	8000e8e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e000      	b.n	8000e90 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40007000 	.word	0x40007000
 8000ea0:	42420060 	.word	0x42420060

08000ea4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e0d0      	b.n	800105a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000eb8:	4b6a      	ldr	r3, [pc, #424]	; (8001064 <HAL_RCC_ClockConfig+0x1c0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d910      	bls.n	8000ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ec6:	4b67      	ldr	r3, [pc, #412]	; (8001064 <HAL_RCC_ClockConfig+0x1c0>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 0207 	bic.w	r2, r3, #7
 8000ece:	4965      	ldr	r1, [pc, #404]	; (8001064 <HAL_RCC_ClockConfig+0x1c0>)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ed6:	4b63      	ldr	r3, [pc, #396]	; (8001064 <HAL_RCC_ClockConfig+0x1c0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d001      	beq.n	8000ee8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e0b8      	b.n	800105a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d020      	beq.n	8000f36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f00:	4b59      	ldr	r3, [pc, #356]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	4a58      	ldr	r2, [pc, #352]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 8000f06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0308 	and.w	r3, r3, #8
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d005      	beq.n	8000f24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f18:	4b53      	ldr	r3, [pc, #332]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	4a52      	ldr	r2, [pc, #328]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 8000f1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f24:	4b50      	ldr	r3, [pc, #320]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	494d      	ldr	r1, [pc, #308]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 8000f32:	4313      	orrs	r3, r2
 8000f34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d040      	beq.n	8000fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d107      	bne.n	8000f5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4a:	4b47      	ldr	r3, [pc, #284]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d115      	bne.n	8000f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e07f      	b.n	800105a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d107      	bne.n	8000f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f62:	4b41      	ldr	r3, [pc, #260]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d109      	bne.n	8000f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e073      	b.n	800105a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f72:	4b3d      	ldr	r3, [pc, #244]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e06b      	b.n	800105a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f82:	4b39      	ldr	r3, [pc, #228]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f023 0203 	bic.w	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	4936      	ldr	r1, [pc, #216]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 8000f90:	4313      	orrs	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f94:	f7ff f934 	bl	8000200 <HAL_GetTick>
 8000f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f9a:	e00a      	b.n	8000fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f9c:	f7ff f930 	bl	8000200 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e053      	b.n	800105a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 020c 	and.w	r2, r3, #12
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d1eb      	bne.n	8000f9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <HAL_RCC_ClockConfig+0x1c0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d210      	bcs.n	8000ff4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <HAL_RCC_ClockConfig+0x1c0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 0207 	bic.w	r2, r3, #7
 8000fda:	4922      	ldr	r1, [pc, #136]	; (8001064 <HAL_RCC_ClockConfig+0x1c0>)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <HAL_RCC_ClockConfig+0x1c0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d001      	beq.n	8000ff4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e032      	b.n	800105a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d008      	beq.n	8001012 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4916      	ldr	r1, [pc, #88]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 800100e:	4313      	orrs	r3, r2
 8001010:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d009      	beq.n	8001032 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	490e      	ldr	r1, [pc, #56]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 800102e:	4313      	orrs	r3, r2
 8001030:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001032:	f000 f821 	bl	8001078 <HAL_RCC_GetSysClockFreq>
 8001036:	4601      	mov	r1, r0
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_RCC_ClockConfig+0x1c4>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_RCC_ClockConfig+0x1c8>)
 8001044:	5cd3      	ldrb	r3, [r2, r3]
 8001046:	fa21 f303 	lsr.w	r3, r1, r3
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <HAL_RCC_ClockConfig+0x1cc>)
 800104c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_RCC_ClockConfig+0x1d0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff f892 	bl	800017c <HAL_InitTick>

  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40022000 	.word	0x40022000
 8001068:	40021000 	.word	0x40021000
 800106c:	08002d9c 	.word	0x08002d9c
 8001070:	2000000c 	.word	0x2000000c
 8001074:	20000000 	.word	0x20000000

08001078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001078:	b490      	push	{r4, r7}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001080:	1d3c      	adds	r4, r7, #4
 8001082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001088:	4b28      	ldr	r3, [pc, #160]	; (800112c <HAL_RCC_GetSysClockFreq+0xb4>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d002      	beq.n	80010b8 <HAL_RCC_GetSysClockFreq+0x40>
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d003      	beq.n	80010be <HAL_RCC_GetSysClockFreq+0x46>
 80010b6:	e02d      	b.n	8001114 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <HAL_RCC_GetSysClockFreq+0xbc>)
 80010ba:	623b      	str	r3, [r7, #32]
      break;
 80010bc:	e02d      	b.n	800111a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	0c9b      	lsrs	r3, r3, #18
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010ca:	4413      	add	r3, r2
 80010cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80010d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d013      	beq.n	8001104 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	0c5b      	lsrs	r3, r3, #17
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010ea:	4413      	add	r3, r2
 80010ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80010f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <HAL_RCC_GetSysClockFreq+0xbc>)
 80010f6:	fb02 f203 	mul.w	r2, r2, r3
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
 8001102:	e004      	b.n	800110e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	4a0c      	ldr	r2, [pc, #48]	; (8001138 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001108:	fb02 f303 	mul.w	r3, r2, r3
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	623b      	str	r3, [r7, #32]
      break;
 8001112:	e002      	b.n	800111a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001116:	623b      	str	r3, [r7, #32]
      break;
 8001118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800111a:	6a3b      	ldr	r3, [r7, #32]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3728      	adds	r7, #40	; 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bc90      	pop	{r4, r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	08002d58 	.word	0x08002d58
 800112c:	08002d68 	.word	0x08002d68
 8001130:	40021000 	.word	0x40021000
 8001134:	007a1200 	.word	0x007a1200
 8001138:	003d0900 	.word	0x003d0900

0800113c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001140:	4b02      	ldr	r3, [pc, #8]	; (800114c <HAL_RCC_GetHCLKFreq+0x10>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	2000000c 	.word	0x2000000c

08001150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001154:	f7ff fff2 	bl	800113c <HAL_RCC_GetHCLKFreq>
 8001158:	4601      	mov	r1, r0
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	0a1b      	lsrs	r3, r3, #8
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	4a03      	ldr	r2, [pc, #12]	; (8001174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001166:	5cd3      	ldrb	r3, [r2, r3]
 8001168:	fa21 f303 	lsr.w	r3, r1, r3
}
 800116c:	4618      	mov	r0, r3
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	08002dac 	.word	0x08002dac

08001178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800117c:	f7ff ffde 	bl	800113c <HAL_RCC_GetHCLKFreq>
 8001180:	4601      	mov	r1, r0
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	0adb      	lsrs	r3, r3, #11
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	4a03      	ldr	r2, [pc, #12]	; (800119c <HAL_RCC_GetPCLK2Freq+0x24>)
 800118e:	5cd3      	ldrb	r3, [r2, r3]
 8001190:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001194:	4618      	mov	r0, r3
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021000 	.word	0x40021000
 800119c:	08002dac 	.word	0x08002dac

080011a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <RCC_Delay+0x34>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <RCC_Delay+0x38>)
 80011ae:	fba2 2303 	umull	r2, r3, r2, r3
 80011b2:	0a5b      	lsrs	r3, r3, #9
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	fb02 f303 	mul.w	r3, r2, r3
 80011ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80011bc:	bf00      	nop
  }
  while (Delay --);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1e5a      	subs	r2, r3, #1
 80011c2:	60fa      	str	r2, [r7, #12]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f9      	bne.n	80011bc <RCC_Delay+0x1c>
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	2000000c 	.word	0x2000000c
 80011d8:	10624dd3 	.word	0x10624dd3

080011dc <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e047      	b.n	800127e <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d106      	bne.n	8001208 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f001 fcb4 	bl	8002b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2224      	movs	r2, #36	; 0x24
 800120c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800121e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 f831 	bl	8001288 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001234:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	695a      	ldr	r2, [r3, #20]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001244:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	695a      	ldr	r2, [r3, #20]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 0208 	orr.w	r2, r2, #8
 8001254:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001264:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2220      	movs	r2, #32
 8001270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2220      	movs	r2, #32
 8001278:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80012c2:	f023 030c 	bic.w	r3, r3, #12
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	68f9      	ldr	r1, [r7, #12]
 80012cc:	430b      	orrs	r3, r1
 80012ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699a      	ldr	r2, [r3, #24]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a52      	ldr	r2, [pc, #328]	; (8001434 <UART_SetConfig+0x1ac>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d14e      	bne.n	800138e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80012f0:	f7ff ff42 	bl	8001178 <HAL_RCC_GetPCLK2Freq>
 80012f4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	009a      	lsls	r2, r3, #2
 8001300:	441a      	add	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	fbb2 f3f3 	udiv	r3, r2, r3
 800130c:	4a4a      	ldr	r2, [pc, #296]	; (8001438 <UART_SetConfig+0x1b0>)
 800130e:	fba2 2303 	umull	r2, r3, r2, r3
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	0119      	lsls	r1, r3, #4
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	009a      	lsls	r2, r3, #2
 8001320:	441a      	add	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	fbb2 f2f3 	udiv	r2, r2, r3
 800132c:	4b42      	ldr	r3, [pc, #264]	; (8001438 <UART_SetConfig+0x1b0>)
 800132e:	fba3 0302 	umull	r0, r3, r3, r2
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2064      	movs	r0, #100	; 0x64
 8001336:	fb00 f303 	mul.w	r3, r0, r3
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	3332      	adds	r3, #50	; 0x32
 8001340:	4a3d      	ldr	r2, [pc, #244]	; (8001438 <UART_SetConfig+0x1b0>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800134c:	4419      	add	r1, r3
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	009a      	lsls	r2, r3, #2
 8001358:	441a      	add	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	fbb2 f2f3 	udiv	r2, r2, r3
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <UART_SetConfig+0x1b0>)
 8001366:	fba3 0302 	umull	r0, r3, r3, r2
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2064      	movs	r0, #100	; 0x64
 800136e:	fb00 f303 	mul.w	r3, r0, r3
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	3332      	adds	r3, #50	; 0x32
 8001378:	4a2f      	ldr	r2, [pc, #188]	; (8001438 <UART_SetConfig+0x1b0>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	f003 020f 	and.w	r2, r3, #15
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	440a      	add	r2, r1
 800138a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800138c:	e04d      	b.n	800142a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800138e:	f7ff fedf 	bl	8001150 <HAL_RCC_GetPCLK1Freq>
 8001392:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	009a      	lsls	r2, r3, #2
 800139e:	441a      	add	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	4a23      	ldr	r2, [pc, #140]	; (8001438 <UART_SetConfig+0x1b0>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	095b      	lsrs	r3, r3, #5
 80013b2:	0119      	lsls	r1, r3, #4
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	009a      	lsls	r2, r3, #2
 80013be:	441a      	add	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <UART_SetConfig+0x1b0>)
 80013cc:	fba3 0302 	umull	r0, r3, r3, r2
 80013d0:	095b      	lsrs	r3, r3, #5
 80013d2:	2064      	movs	r0, #100	; 0x64
 80013d4:	fb00 f303 	mul.w	r3, r0, r3
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	3332      	adds	r3, #50	; 0x32
 80013de:	4a16      	ldr	r2, [pc, #88]	; (8001438 <UART_SetConfig+0x1b0>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	095b      	lsrs	r3, r3, #5
 80013e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013ea:	4419      	add	r1, r3
 80013ec:	68ba      	ldr	r2, [r7, #8]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	009a      	lsls	r2, r3, #2
 80013f6:	441a      	add	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <UART_SetConfig+0x1b0>)
 8001404:	fba3 0302 	umull	r0, r3, r3, r2
 8001408:	095b      	lsrs	r3, r3, #5
 800140a:	2064      	movs	r0, #100	; 0x64
 800140c:	fb00 f303 	mul.w	r3, r0, r3
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	3332      	adds	r3, #50	; 0x32
 8001416:	4a08      	ldr	r2, [pc, #32]	; (8001438 <UART_SetConfig+0x1b0>)
 8001418:	fba2 2303 	umull	r2, r3, r2, r3
 800141c:	095b      	lsrs	r3, r3, #5
 800141e:	f003 020f 	and.w	r2, r3, #15
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	440a      	add	r2, r1
 8001428:	609a      	str	r2, [r3, #8]
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40013800 	.word	0x40013800
 8001438:	51eb851f 	.word	0x51eb851f

0800143c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800144a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144e:	2b84      	cmp	r3, #132	; 0x84
 8001450:	d005      	beq.n	800145e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001452:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4413      	add	r3, r2
 800145a:	3303      	adds	r3, #3
 800145c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800146e:	f000 facd 	bl	8001a0c <vTaskStartScheduler>
  
  return osOK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	bd80      	pop	{r7, pc}

08001478 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af04      	add	r7, sp, #16
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d020      	beq.n	80014cc <osThreadCreate+0x54>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d01c      	beq.n	80014cc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685c      	ldr	r4, [r3, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681d      	ldr	r5, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691e      	ldr	r6, [r3, #16]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ffc9 	bl	800143c <makeFreeRtosPriority>
 80014aa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80014b4:	9202      	str	r2, [sp, #8]
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	9100      	str	r1, [sp, #0]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	4632      	mov	r2, r6
 80014be:	4629      	mov	r1, r5
 80014c0:	4620      	mov	r0, r4
 80014c2:	f000 f8e8 	bl	8001696 <xTaskCreateStatic>
 80014c6:	4603      	mov	r3, r0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	e01c      	b.n	8001506 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685c      	ldr	r4, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80014d8:	b29e      	uxth	r6, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ffab 	bl	800143c <makeFreeRtosPriority>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	9200      	str	r2, [sp, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	4632      	mov	r2, r6
 80014f4:	4629      	mov	r1, r5
 80014f6:	4620      	mov	r0, r4
 80014f8:	f000 f926 	bl	8001748 <xTaskCreate>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d001      	beq.n	8001506 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001502:	2300      	movs	r3, #0
 8001504:	e000      	b.n	8001508 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001510 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <osDelay+0x16>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	e000      	b.n	8001528 <osDelay+0x18>
 8001526:	2301      	movs	r3, #1
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fa3b 	bl	80019a4 <vTaskDelay>
  
  return osOK;
 800152e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f103 0208 	add.w	r2, r3, #8
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001550:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f103 0208 	add.w	r2, r3, #8
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f103 0208 	add.w	r2, r3, #8
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800158e:	b480      	push	{r7}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	601a      	str	r2, [r3, #0]
}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015ea:	d103      	bne.n	80015f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	e00c      	b.n	800160e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3308      	adds	r3, #8
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	e002      	b.n	8001602 <vListInsert+0x2e>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	429a      	cmp	r2, r3
 800160c:	d2f6      	bcs.n	80015fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	601a      	str	r2, [r3, #0]
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6892      	ldr	r2, [r2, #8]
 800165a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6852      	ldr	r2, [r2, #4]
 8001664:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	429a      	cmp	r2, r3
 800166e:	d103      	bne.n	8001678 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	1e5a      	subs	r2, r3, #1
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001696:	b580      	push	{r7, lr}
 8001698:	b08e      	sub	sp, #56	; 0x38
 800169a:	af04      	add	r7, sp, #16
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80016a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80016aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ae:	f383 8811 	msr	BASEPRI, r3
 80016b2:	f3bf 8f6f 	isb	sy
 80016b6:	f3bf 8f4f 	dsb	sy
 80016ba:	623b      	str	r3, [r7, #32]
 80016bc:	e7fe      	b.n	80016bc <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80016be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d109      	bne.n	80016d8 <xTaskCreateStatic+0x42>
 80016c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016c8:	f383 8811 	msr	BASEPRI, r3
 80016cc:	f3bf 8f6f 	isb	sy
 80016d0:	f3bf 8f4f 	dsb	sy
 80016d4:	61fb      	str	r3, [r7, #28]
 80016d6:	e7fe      	b.n	80016d6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80016d8:	2354      	movs	r3, #84	; 0x54
 80016da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b54      	cmp	r3, #84	; 0x54
 80016e0:	d009      	beq.n	80016f6 <xTaskCreateStatic+0x60>
 80016e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016e6:	f383 8811 	msr	BASEPRI, r3
 80016ea:	f3bf 8f6f 	isb	sy
 80016ee:	f3bf 8f4f 	dsb	sy
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	e7fe      	b.n	80016f4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80016f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d01e      	beq.n	800173a <xTaskCreateStatic+0xa4>
 80016fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d01b      	beq.n	800173a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800170a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	2202      	movs	r2, #2
 8001710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001714:	2300      	movs	r3, #0
 8001716:	9303      	str	r3, [sp, #12]
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	9301      	str	r3, [sp, #4]
 8001722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f850 	bl	80017d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001734:	f000 f8cc 	bl	80018d0 <prvAddNewTaskToReadyList>
 8001738:	e001      	b.n	800173e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800173e:	697b      	ldr	r3, [r7, #20]
	}
 8001740:	4618      	mov	r0, r3
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08c      	sub	sp, #48	; 0x30
 800174c:	af04      	add	r7, sp, #16
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	4613      	mov	r3, r2
 8001756:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fe75 	bl	800244c <pvPortMalloc>
 8001762:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00e      	beq.n	8001788 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800176a:	2054      	movs	r0, #84	; 0x54
 800176c:	f000 fe6e 	bl	800244c <pvPortMalloc>
 8001770:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	631a      	str	r2, [r3, #48]	; 0x30
 800177e:	e005      	b.n	800178c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001780:	6978      	ldr	r0, [r7, #20]
 8001782:	f000 ff25 	bl	80025d0 <vPortFree>
 8001786:	e001      	b.n	800178c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d017      	beq.n	80017c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800179a:	88fa      	ldrh	r2, [r7, #6]
 800179c:	2300      	movs	r3, #0
 800179e:	9303      	str	r3, [sp, #12]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68b9      	ldr	r1, [r7, #8]
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 f80e 	bl	80017d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80017b6:	69f8      	ldr	r0, [r7, #28]
 80017b8:	f000 f88a 	bl	80018d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80017bc:	2301      	movs	r3, #1
 80017be:	61bb      	str	r3, [r7, #24]
 80017c0:	e002      	b.n	80017c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80017c8:	69bb      	ldr	r3, [r7, #24]
	}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3720      	adds	r7, #32
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b088      	sub	sp, #32
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80017e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017ea:	3b01      	subs	r3, #1
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	f023 0307 	bic.w	r3, r3, #7
 80017f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	2b00      	cmp	r3, #0
 8001802:	d009      	beq.n	8001818 <prvInitialiseNewTask+0x46>
 8001804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001808:	f383 8811 	msr	BASEPRI, r3
 800180c:	f3bf 8f6f 	isb	sy
 8001810:	f3bf 8f4f 	dsb	sy
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e7fe      	b.n	8001816 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	e012      	b.n	8001844 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	4413      	add	r3, r2
 8001824:	7819      	ldrb	r1, [r3, #0]
 8001826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	4413      	add	r3, r2
 800182c:	3334      	adds	r3, #52	; 0x34
 800182e:	460a      	mov	r2, r1
 8001830:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	4413      	add	r3, r2
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d006      	beq.n	800184c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3301      	adds	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	d9e9      	bls.n	800181e <prvInitialiseNewTask+0x4c>
 800184a:	e000      	b.n	800184e <prvInitialiseNewTask+0x7c>
		{
			break;
 800184c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800184e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001858:	2b06      	cmp	r3, #6
 800185a:	d901      	bls.n	8001860 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800185c:	2306      	movs	r3, #6
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001864:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800186a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800186c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800186e:	2200      	movs	r2, #0
 8001870:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001874:	3304      	adds	r3, #4
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fe7d 	bl	8001576 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800187c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187e:	3318      	adds	r3, #24
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fe78 	bl	8001576 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800188a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800188c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188e:	f1c3 0207 	rsb	r2, r3, #7
 8001892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001894:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800189a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800189c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189e:	2200      	movs	r2, #0
 80018a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80018a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	68f9      	ldr	r1, [r7, #12]
 80018ae:	69b8      	ldr	r0, [r7, #24]
 80018b0:	f000 fc24 	bl	80020fc <pxPortInitialiseStack>
 80018b4:	4602      	mov	r2, r0
 80018b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80018ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d002      	beq.n	80018c6 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80018c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80018c6:	bf00      	nop
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80018d8:	f000 fcfe 	bl	80022d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80018dc:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <prvAddNewTaskToReadyList+0xb8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	4a29      	ldr	r2, [pc, #164]	; (8001988 <prvAddNewTaskToReadyList+0xb8>)
 80018e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80018e6:	4b29      	ldr	r3, [pc, #164]	; (800198c <prvAddNewTaskToReadyList+0xbc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80018ee:	4a27      	ldr	r2, [pc, #156]	; (800198c <prvAddNewTaskToReadyList+0xbc>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <prvAddNewTaskToReadyList+0xb8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d110      	bne.n	800191e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80018fc:	f000 fabc 	bl	8001e78 <prvInitialiseTaskLists>
 8001900:	e00d      	b.n	800191e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <prvAddNewTaskToReadyList+0xc0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <prvAddNewTaskToReadyList+0xbc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	429a      	cmp	r2, r3
 8001916:	d802      	bhi.n	800191e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001918:	4a1c      	ldr	r2, [pc, #112]	; (800198c <prvAddNewTaskToReadyList+0xbc>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <prvAddNewTaskToReadyList+0xc4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	4a1b      	ldr	r2, [pc, #108]	; (8001994 <prvAddNewTaskToReadyList+0xc4>)
 8001926:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	2201      	movs	r2, #1
 800192e:	409a      	lsls	r2, r3
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <prvAddNewTaskToReadyList+0xc8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4313      	orrs	r3, r2
 8001936:	4a18      	ldr	r2, [pc, #96]	; (8001998 <prvAddNewTaskToReadyList+0xc8>)
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4a15      	ldr	r2, [pc, #84]	; (800199c <prvAddNewTaskToReadyList+0xcc>)
 8001948:	441a      	add	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3304      	adds	r3, #4
 800194e:	4619      	mov	r1, r3
 8001950:	4610      	mov	r0, r2
 8001952:	f7ff fe1c 	bl	800158e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001956:	f000 fced 	bl	8002334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <prvAddNewTaskToReadyList+0xc0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00e      	beq.n	8001980 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <prvAddNewTaskToReadyList+0xbc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	429a      	cmp	r2, r3
 800196e:	d207      	bcs.n	8001980 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <prvAddNewTaskToReadyList+0xd0>)
 8001972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	f3bf 8f4f 	dsb	sy
 800197c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	2000012c 	.word	0x2000012c
 800198c:	2000002c 	.word	0x2000002c
 8001990:	20000138 	.word	0x20000138
 8001994:	20000148 	.word	0x20000148
 8001998:	20000134 	.word	0x20000134
 800199c:	20000030 	.word	0x20000030
 80019a0:	e000ed04 	.word	0xe000ed04

080019a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d016      	beq.n	80019e4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <vTaskDelay+0x60>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <vTaskDelay+0x2e>
 80019be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c2:	f383 8811 	msr	BASEPRI, r3
 80019c6:	f3bf 8f6f 	isb	sy
 80019ca:	f3bf 8f4f 	dsb	sy
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	e7fe      	b.n	80019d0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80019d2:	f000 f879 	bl	8001ac8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80019d6:	2100      	movs	r1, #0
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 fb29 	bl	8002030 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80019de:	f000 f881 	bl	8001ae4 <xTaskResumeAll>
 80019e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d107      	bne.n	80019fa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <vTaskDelay+0x64>)
 80019ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	f3bf 8f4f 	dsb	sy
 80019f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000154 	.word	0x20000154
 8001a08:	e000ed04 	.word	0xe000ed04

08001a0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001a1a:	463a      	mov	r2, r7
 8001a1c:	1d39      	adds	r1, r7, #4
 8001a1e:	f107 0308 	add.w	r3, r7, #8
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 ff0c 	bl	8002840 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001a28:	6839      	ldr	r1, [r7, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	9202      	str	r2, [sp, #8]
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	2300      	movs	r3, #0
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	2300      	movs	r3, #0
 8001a38:	460a      	mov	r2, r1
 8001a3a:	491d      	ldr	r1, [pc, #116]	; (8001ab0 <vTaskStartScheduler+0xa4>)
 8001a3c:	481d      	ldr	r0, [pc, #116]	; (8001ab4 <vTaskStartScheduler+0xa8>)
 8001a3e:	f7ff fe2a 	bl	8001696 <xTaskCreateStatic>
 8001a42:	4602      	mov	r2, r0
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <vTaskStartScheduler+0xac>)
 8001a46:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <vTaskStartScheduler+0xac>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001a50:	2301      	movs	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e001      	b.n	8001a5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d115      	bne.n	8001a8c <vTaskStartScheduler+0x80>
 8001a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a64:	f383 8811 	msr	BASEPRI, r3
 8001a68:	f3bf 8f6f 	isb	sy
 8001a6c:	f3bf 8f4f 	dsb	sy
 8001a70:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <vTaskStartScheduler+0xb0>)
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <vTaskStartScheduler+0xb4>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <vTaskStartScheduler+0xb8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001a86:	f000 fbb7 	bl	80021f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001a8a:	e00d      	b.n	8001aa8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a92:	d109      	bne.n	8001aa8 <vTaskStartScheduler+0x9c>
 8001a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a98:	f383 8811 	msr	BASEPRI, r3
 8001a9c:	f3bf 8f6f 	isb	sy
 8001aa0:	f3bf 8f4f 	dsb	sy
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	e7fe      	b.n	8001aa6 <vTaskStartScheduler+0x9a>
}
 8001aa8:	bf00      	nop
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	08002d6c 	.word	0x08002d6c
 8001ab4:	08001e49 	.word	0x08001e49
 8001ab8:	20000150 	.word	0x20000150
 8001abc:	2000014c 	.word	0x2000014c
 8001ac0:	20000138 	.word	0x20000138
 8001ac4:	20000130 	.word	0x20000130

08001ac8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <vTaskSuspendAll+0x18>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	4a03      	ldr	r2, [pc, #12]	; (8001ae0 <vTaskSuspendAll+0x18>)
 8001ad4:	6013      	str	r3, [r2, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000154 	.word	0x20000154

08001ae4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001af2:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <xTaskResumeAll+0x114>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <xTaskResumeAll+0x2a>
 8001afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afe:	f383 8811 	msr	BASEPRI, r3
 8001b02:	f3bf 8f6f 	isb	sy
 8001b06:	f3bf 8f4f 	dsb	sy
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	e7fe      	b.n	8001b0c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001b0e:	f000 fbe3 	bl	80022d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001b12:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <xTaskResumeAll+0x114>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	4a37      	ldr	r2, [pc, #220]	; (8001bf8 <xTaskResumeAll+0x114>)
 8001b1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <xTaskResumeAll+0x114>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d161      	bne.n	8001be8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b24:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <xTaskResumeAll+0x118>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d05d      	beq.n	8001be8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b2c:	e02e      	b.n	8001b8c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001b2e:	4b34      	ldr	r3, [pc, #208]	; (8001c00 <xTaskResumeAll+0x11c>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	3318      	adds	r3, #24
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fd82 	bl	8001644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3304      	adds	r3, #4
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fd7d 	bl	8001644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	2201      	movs	r2, #1
 8001b50:	409a      	lsls	r2, r3
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <xTaskResumeAll+0x120>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <xTaskResumeAll+0x120>)
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4a27      	ldr	r2, [pc, #156]	; (8001c08 <xTaskResumeAll+0x124>)
 8001b6a:	441a      	add	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f7ff fd0b 	bl	800158e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <xTaskResumeAll+0x128>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d302      	bcc.n	8001b8c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001b86:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <xTaskResumeAll+0x12c>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b8c:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <xTaskResumeAll+0x11c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1cc      	bne.n	8001b2e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001b9a:	f000 fa07 	bl	8001fac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <xTaskResumeAll+0x130>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d010      	beq.n	8001bcc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001baa:	f000 f837 	bl	8001c1c <xTaskIncrementTick>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <xTaskResumeAll+0x12c>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f1      	bne.n	8001baa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <xTaskResumeAll+0x130>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <xTaskResumeAll+0x12c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d009      	beq.n	8001be8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <xTaskResumeAll+0x134>)
 8001bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	f3bf 8f4f 	dsb	sy
 8001be4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001be8:	f000 fba4 	bl	8002334 <vPortExitCritical>

	return xAlreadyYielded;
 8001bec:	68bb      	ldr	r3, [r7, #8]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000154 	.word	0x20000154
 8001bfc:	2000012c 	.word	0x2000012c
 8001c00:	200000ec 	.word	0x200000ec
 8001c04:	20000134 	.word	0x20000134
 8001c08:	20000030 	.word	0x20000030
 8001c0c:	2000002c 	.word	0x2000002c
 8001c10:	20000140 	.word	0x20000140
 8001c14:	2000013c 	.word	0x2000013c
 8001c18:	e000ed04 	.word	0xe000ed04

08001c1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c26:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <xTaskIncrementTick+0x14c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f040 808c 	bne.w	8001d48 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001c30:	4b4e      	ldr	r3, [pc, #312]	; (8001d6c <xTaskIncrementTick+0x150>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001c38:	4a4c      	ldr	r2, [pc, #304]	; (8001d6c <xTaskIncrementTick+0x150>)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d11f      	bne.n	8001c84 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001c44:	4b4a      	ldr	r3, [pc, #296]	; (8001d70 <xTaskIncrementTick+0x154>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <xTaskIncrementTick+0x46>
 8001c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c52:	f383 8811 	msr	BASEPRI, r3
 8001c56:	f3bf 8f6f 	isb	sy
 8001c5a:	f3bf 8f4f 	dsb	sy
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	e7fe      	b.n	8001c60 <xTaskIncrementTick+0x44>
 8001c62:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <xTaskIncrementTick+0x154>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <xTaskIncrementTick+0x158>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a40      	ldr	r2, [pc, #256]	; (8001d70 <xTaskIncrementTick+0x154>)
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4a40      	ldr	r2, [pc, #256]	; (8001d74 <xTaskIncrementTick+0x158>)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <xTaskIncrementTick+0x15c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	4a3e      	ldr	r2, [pc, #248]	; (8001d78 <xTaskIncrementTick+0x15c>)
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	f000 f994 	bl	8001fac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001c84:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <xTaskIncrementTick+0x160>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d34d      	bcc.n	8001d2a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c8e:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <xTaskIncrementTick+0x154>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <xTaskIncrementTick+0x80>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <xTaskIncrementTick+0x82>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d004      	beq.n	8001cac <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ca2:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <xTaskIncrementTick+0x160>)
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ca8:	601a      	str	r2, [r3, #0]
					break;
 8001caa:	e03e      	b.n	8001d2a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001cac:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <xTaskIncrementTick+0x154>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d203      	bcs.n	8001ccc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001cc4:	4a2d      	ldr	r2, [pc, #180]	; (8001d7c <xTaskIncrementTick+0x160>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6013      	str	r3, [r2, #0]
						break;
 8001cca:	e02e      	b.n	8001d2a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fcb7 	bl	8001644 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d004      	beq.n	8001ce8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3318      	adds	r3, #24
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fcae 	bl	8001644 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	2201      	movs	r2, #1
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <xTaskIncrementTick+0x164>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <xTaskIncrementTick+0x164>)
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <xTaskIncrementTick+0x168>)
 8001d08:	441a      	add	r2, r3
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4610      	mov	r0, r2
 8001d12:	f7ff fc3c 	bl	800158e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <xTaskIncrementTick+0x16c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d3b4      	bcc.n	8001c8e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001d24:	2301      	movs	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d28:	e7b1      	b.n	8001c8e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <xTaskIncrementTick+0x16c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d30:	4914      	ldr	r1, [pc, #80]	; (8001d84 <xTaskIncrementTick+0x168>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d907      	bls.n	8001d52 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001d42:	2301      	movs	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	e004      	b.n	8001d52 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <xTaskIncrementTick+0x170>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <xTaskIncrementTick+0x170>)
 8001d50:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <xTaskIncrementTick+0x174>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001d5e:	697b      	ldr	r3, [r7, #20]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000154 	.word	0x20000154
 8001d6c:	20000130 	.word	0x20000130
 8001d70:	200000e4 	.word	0x200000e4
 8001d74:	200000e8 	.word	0x200000e8
 8001d78:	20000144 	.word	0x20000144
 8001d7c:	2000014c 	.word	0x2000014c
 8001d80:	20000134 	.word	0x20000134
 8001d84:	20000030 	.word	0x20000030
 8001d88:	2000002c 	.word	0x2000002c
 8001d8c:	2000013c 	.word	0x2000013c
 8001d90:	20000140 	.word	0x20000140

08001d94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <vTaskSwitchContext+0xa0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001da2:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <vTaskSwitchContext+0xa4>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001da8:	e03e      	b.n	8001e28 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <vTaskSwitchContext+0xa4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001db0:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <vTaskSwitchContext+0xa8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	f1c3 031f 	rsb	r3, r3, #31
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	491e      	ldr	r1, [pc, #120]	; (8001e40 <vTaskSwitchContext+0xac>)
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <vTaskSwitchContext+0x5a>
	__asm volatile
 8001dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dde:	f383 8811 	msr	BASEPRI, r3
 8001de2:	f3bf 8f6f 	isb	sy
 8001de6:	f3bf 8f4f 	dsb	sy
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	e7fe      	b.n	8001dec <vTaskSwitchContext+0x58>
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <vTaskSwitchContext+0xac>)
 8001dfa:	4413      	add	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	3308      	adds	r3, #8
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d104      	bne.n	8001e1e <vTaskSwitchContext+0x8a>
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <vTaskSwitchContext+0xb0>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	371c      	adds	r7, #28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000154 	.word	0x20000154
 8001e38:	20000140 	.word	0x20000140
 8001e3c:	20000134 	.word	0x20000134
 8001e40:	20000030 	.word	0x20000030
 8001e44:	2000002c 	.word	0x2000002c

08001e48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001e50:	f000 f852 	bl	8001ef8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <prvIdleTask+0x28>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d9f9      	bls.n	8001e50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <prvIdleTask+0x2c>)
 8001e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	f3bf 8f4f 	dsb	sy
 8001e68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001e6c:	e7f0      	b.n	8001e50 <prvIdleTask+0x8>
 8001e6e:	bf00      	nop
 8001e70:	20000030 	.word	0x20000030
 8001e74:	e000ed04 	.word	0xe000ed04

08001e78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	e00c      	b.n	8001e9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <prvInitialiseTaskLists+0x60>)
 8001e90:	4413      	add	r3, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fb50 	bl	8001538 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b06      	cmp	r3, #6
 8001ea2:	d9ef      	bls.n	8001e84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001ea4:	480d      	ldr	r0, [pc, #52]	; (8001edc <prvInitialiseTaskLists+0x64>)
 8001ea6:	f7ff fb47 	bl	8001538 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001eaa:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <prvInitialiseTaskLists+0x68>)
 8001eac:	f7ff fb44 	bl	8001538 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001eb0:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <prvInitialiseTaskLists+0x6c>)
 8001eb2:	f7ff fb41 	bl	8001538 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001eb6:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <prvInitialiseTaskLists+0x70>)
 8001eb8:	f7ff fb3e 	bl	8001538 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001ebc:	480b      	ldr	r0, [pc, #44]	; (8001eec <prvInitialiseTaskLists+0x74>)
 8001ebe:	f7ff fb3b 	bl	8001538 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <prvInitialiseTaskLists+0x78>)
 8001ec4:	4a05      	ldr	r2, [pc, #20]	; (8001edc <prvInitialiseTaskLists+0x64>)
 8001ec6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <prvInitialiseTaskLists+0x7c>)
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <prvInitialiseTaskLists+0x68>)
 8001ecc:	601a      	str	r2, [r3, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000030 	.word	0x20000030
 8001edc:	200000bc 	.word	0x200000bc
 8001ee0:	200000d0 	.word	0x200000d0
 8001ee4:	200000ec 	.word	0x200000ec
 8001ee8:	20000100 	.word	0x20000100
 8001eec:	20000118 	.word	0x20000118
 8001ef0:	200000e4 	.word	0x200000e4
 8001ef4:	200000e8 	.word	0x200000e8

08001ef8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001efe:	e019      	b.n	8001f34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001f00:	f000 f9ea 	bl	80022d8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <prvCheckTasksWaitingTermination+0x4c>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fb97 	bl	8001644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <prvCheckTasksWaitingTermination+0x50>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <prvCheckTasksWaitingTermination+0x50>)
 8001f1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001f20:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <prvCheckTasksWaitingTermination+0x54>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <prvCheckTasksWaitingTermination+0x54>)
 8001f28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001f2a:	f000 fa03 	bl	8002334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f80e 	bl	8001f50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <prvCheckTasksWaitingTermination+0x54>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1e1      	bne.n	8001f00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000100 	.word	0x20000100
 8001f48:	2000012c 	.word	0x2000012c
 8001f4c:	20000114 	.word	0x20000114

08001f50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d108      	bne.n	8001f74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fb32 	bl	80025d0 <vPortFree>
				vPortFree( pxTCB );
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fb2f 	bl	80025d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001f72:	e017      	b.n	8001fa4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d103      	bne.n	8001f86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fb26 	bl	80025d0 <vPortFree>
	}
 8001f84:	e00e      	b.n	8001fa4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d009      	beq.n	8001fa4 <prvDeleteTCB+0x54>
 8001f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f94:	f383 8811 	msr	BASEPRI, r3
 8001f98:	f3bf 8f6f 	isb	sy
 8001f9c:	f3bf 8f4f 	dsb	sy
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	e7fe      	b.n	8001fa2 <prvDeleteTCB+0x52>
	}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <prvResetNextTaskUnblockTime+0x40>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <prvResetNextTaskUnblockTime+0x14>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <prvResetNextTaskUnblockTime+0x16>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <prvResetNextTaskUnblockTime+0x44>)
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fcc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001fce:	e008      	b.n	8001fe2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <prvResetNextTaskUnblockTime+0x40>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <prvResetNextTaskUnblockTime+0x44>)
 8001fe0:	6013      	str	r3, [r2, #0]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	200000e4 	.word	0x200000e4
 8001ff0:	2000014c 	.word	0x2000014c

08001ff4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <xTaskGetSchedulerState+0x34>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d102      	bne.n	8002008 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002002:	2301      	movs	r3, #1
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	e008      	b.n	800201a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <xTaskGetSchedulerState+0x38>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002010:	2302      	movs	r3, #2
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	e001      	b.n	800201a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800201a:	687b      	ldr	r3, [r7, #4]
	}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000138 	.word	0x20000138
 800202c:	20000154 	.word	0x20000154

08002030 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3304      	adds	r3, #4
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fafc 	bl	8001644 <uxListRemove>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10b      	bne.n	800206a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	2201      	movs	r2, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4013      	ands	r3, r2
 8002066:	4a20      	ldr	r2, [pc, #128]	; (80020e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002068:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002070:	d10a      	bne.n	8002088 <prvAddCurrentTaskToDelayedList+0x58>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	3304      	adds	r3, #4
 800207e:	4619      	mov	r1, r3
 8002080:	481a      	ldr	r0, [pc, #104]	; (80020ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8002082:	f7ff fa84 	bl	800158e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002086:	e026      	b.n	80020d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	429a      	cmp	r2, r3
 800209e:	d209      	bcs.n	80020b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3304      	adds	r3, #4
 80020aa:	4619      	mov	r1, r3
 80020ac:	4610      	mov	r0, r2
 80020ae:	f7ff fa91 	bl	80015d4 <vListInsert>
}
 80020b2:	e010      	b.n	80020d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	3304      	adds	r3, #4
 80020be:	4619      	mov	r1, r3
 80020c0:	4610      	mov	r0, r2
 80020c2:	f7ff fa87 	bl	80015d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d202      	bcs.n	80020d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80020d0:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	6013      	str	r3, [r2, #0]
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000130 	.word	0x20000130
 80020e4:	2000002c 	.word	0x2000002c
 80020e8:	20000134 	.word	0x20000134
 80020ec:	20000118 	.word	0x20000118
 80020f0:	200000e8 	.word	0x200000e8
 80020f4:	200000e4 	.word	0x200000e4
 80020f8:	2000014c 	.word	0x2000014c

080020fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3b04      	subs	r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3b04      	subs	r3, #4
 800211a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f023 0201 	bic.w	r2, r3, #1
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3b04      	subs	r3, #4
 800212a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800212c:	4a08      	ldr	r2, [pc, #32]	; (8002150 <pxPortInitialiseStack+0x54>)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3b14      	subs	r3, #20
 8002136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3b20      	subs	r3, #32
 8002142:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002144:	68fb      	ldr	r3, [r7, #12]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	08002155 	.word	0x08002155

08002154 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <prvTaskExitError+0x4c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002166:	d009      	beq.n	800217c <prvTaskExitError+0x28>
 8002168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216c:	f383 8811 	msr	BASEPRI, r3
 8002170:	f3bf 8f6f 	isb	sy
 8002174:	f3bf 8f4f 	dsb	sy
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e7fe      	b.n	800217a <prvTaskExitError+0x26>
 800217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800218e:	bf00      	nop
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0fc      	beq.n	8002190 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	20000008 	.word	0x20000008
	...

080021b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <pxCurrentTCBConst2>)
 80021b2:	6819      	ldr	r1, [r3, #0]
 80021b4:	6808      	ldr	r0, [r1, #0]
 80021b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80021ba:	f380 8809 	msr	PSP, r0
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	f04f 0000 	mov.w	r0, #0
 80021c6:	f380 8811 	msr	BASEPRI, r0
 80021ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80021ce:	4770      	bx	lr

080021d0 <pxCurrentTCBConst2>:
 80021d0:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop

080021d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80021d8:	4806      	ldr	r0, [pc, #24]	; (80021f4 <prvPortStartFirstTask+0x1c>)
 80021da:	6800      	ldr	r0, [r0, #0]
 80021dc:	6800      	ldr	r0, [r0, #0]
 80021de:	f380 8808 	msr	MSP, r0
 80021e2:	b662      	cpsie	i
 80021e4:	b661      	cpsie	f
 80021e6:	f3bf 8f4f 	dsb	sy
 80021ea:	f3bf 8f6f 	isb	sy
 80021ee:	df00      	svc	0
 80021f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80021f2:	bf00      	nop
 80021f4:	e000ed08 	.word	0xe000ed08

080021f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80021fe:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <xPortStartScheduler+0xcc>)
 8002200:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	22ff      	movs	r2, #255	; 0xff
 800220e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <xPortStartScheduler+0xd0>)
 8002224:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002226:	4b29      	ldr	r3, [pc, #164]	; (80022cc <xPortStartScheduler+0xd4>)
 8002228:	2207      	movs	r2, #7
 800222a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800222c:	e009      	b.n	8002242 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800222e:	4b27      	ldr	r3, [pc, #156]	; (80022cc <xPortStartScheduler+0xd4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3b01      	subs	r3, #1
 8002234:	4a25      	ldr	r2, [pc, #148]	; (80022cc <xPortStartScheduler+0xd4>)
 8002236:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224a:	2b80      	cmp	r3, #128	; 0x80
 800224c:	d0ef      	beq.n	800222e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800224e:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <xPortStartScheduler+0xd4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f1c3 0307 	rsb	r3, r3, #7
 8002256:	2b04      	cmp	r3, #4
 8002258:	d009      	beq.n	800226e <xPortStartScheduler+0x76>
 800225a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225e:	f383 8811 	msr	BASEPRI, r3
 8002262:	f3bf 8f6f 	isb	sy
 8002266:	f3bf 8f4f 	dsb	sy
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	e7fe      	b.n	800226c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800226e:	4b17      	ldr	r3, [pc, #92]	; (80022cc <xPortStartScheduler+0xd4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	4a15      	ldr	r2, [pc, #84]	; (80022cc <xPortStartScheduler+0xd4>)
 8002276:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <xPortStartScheduler+0xd4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002280:	4a12      	ldr	r2, [pc, #72]	; (80022cc <xPortStartScheduler+0xd4>)
 8002282:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <xPortStartScheduler+0xd8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0f      	ldr	r2, [pc, #60]	; (80022d0 <xPortStartScheduler+0xd8>)
 8002292:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002296:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002298:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <xPortStartScheduler+0xd8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <xPortStartScheduler+0xd8>)
 800229e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80022a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80022a4:	f000 f8b0 	bl	8002408 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <xPortStartScheduler+0xdc>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80022ae:	f7ff ff93 	bl	80021d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80022b2:	f7ff fd6f 	bl	8001d94 <vTaskSwitchContext>
	prvTaskExitError();
 80022b6:	f7ff ff4d 	bl	8002154 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	e000e400 	.word	0xe000e400
 80022c8:	20000158 	.word	0x20000158
 80022cc:	2000015c 	.word	0x2000015c
 80022d0:	e000ed20 	.word	0xe000ed20
 80022d4:	20000008 	.word	0x20000008

080022d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e2:	f383 8811 	msr	BASEPRI, r3
 80022e6:	f3bf 8f6f 	isb	sy
 80022ea:	f3bf 8f4f 	dsb	sy
 80022ee:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <vPortEnterCritical+0x54>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3301      	adds	r3, #1
 80022f6:	4a0d      	ldr	r2, [pc, #52]	; (800232c <vPortEnterCritical+0x54>)
 80022f8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <vPortEnterCritical+0x54>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d10e      	bne.n	8002320 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <vPortEnterCritical+0x58>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d009      	beq.n	8002320 <vPortEnterCritical+0x48>
 800230c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002310:	f383 8811 	msr	BASEPRI, r3
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	e7fe      	b.n	800231e <vPortEnterCritical+0x46>
	}
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000008 	.word	0x20000008
 8002330:	e000ed04 	.word	0xe000ed04

08002334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <vPortExitCritical+0x48>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <vPortExitCritical+0x22>
 8002342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002346:	f383 8811 	msr	BASEPRI, r3
 800234a:	f3bf 8f6f 	isb	sy
 800234e:	f3bf 8f4f 	dsb	sy
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	e7fe      	b.n	8002354 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <vPortExitCritical+0x48>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3b01      	subs	r3, #1
 800235c:	4a07      	ldr	r2, [pc, #28]	; (800237c <vPortExitCritical+0x48>)
 800235e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <vPortExitCritical+0x48>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d104      	bne.n	8002372 <vPortExitCritical+0x3e>
 8002368:	2300      	movs	r3, #0
 800236a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	20000008 	.word	0x20000008

08002380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002380:	f3ef 8009 	mrs	r0, PSP
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <pxCurrentTCBConst>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002390:	6010      	str	r0, [r2, #0]
 8002392:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002396:	f04f 0050 	mov.w	r0, #80	; 0x50
 800239a:	f380 8811 	msr	BASEPRI, r0
 800239e:	f7ff fcf9 	bl	8001d94 <vTaskSwitchContext>
 80023a2:	f04f 0000 	mov.w	r0, #0
 80023a6:	f380 8811 	msr	BASEPRI, r0
 80023aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80023ae:	6819      	ldr	r1, [r3, #0]
 80023b0:	6808      	ldr	r0, [r1, #0]
 80023b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80023b6:	f380 8809 	msr	PSP, r0
 80023ba:	f3bf 8f6f 	isb	sy
 80023be:	4770      	bx	lr

080023c0 <pxCurrentTCBConst>:
 80023c0:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop

080023c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
	__asm volatile
 80023ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d2:	f383 8811 	msr	BASEPRI, r3
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	f3bf 8f4f 	dsb	sy
 80023de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80023e0:	f7ff fc1c 	bl	8001c1c <xTaskIncrementTick>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <xPortSysTickHandler+0x3c>)
 80023ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	2300      	movs	r3, #0
 80023f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	e000ed04 	.word	0xe000ed04

08002408 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800240c:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <vPortSetupTimerInterrupt+0x30>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <vPortSetupTimerInterrupt+0x34>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <vPortSetupTimerInterrupt+0x38>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a09      	ldr	r2, [pc, #36]	; (8002444 <vPortSetupTimerInterrupt+0x3c>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	099b      	lsrs	r3, r3, #6
 8002424:	4a08      	ldr	r2, [pc, #32]	; (8002448 <vPortSetupTimerInterrupt+0x40>)
 8002426:	3b01      	subs	r3, #1
 8002428:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800242a:	4b03      	ldr	r3, [pc, #12]	; (8002438 <vPortSetupTimerInterrupt+0x30>)
 800242c:	2207      	movs	r2, #7
 800242e:	601a      	str	r2, [r3, #0]
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	e000e010 	.word	0xe000e010
 800243c:	e000e018 	.word	0xe000e018
 8002440:	2000000c 	.word	0x2000000c
 8002444:	10624dd3 	.word	0x10624dd3
 8002448:	e000e014 	.word	0xe000e014

0800244c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	; 0x28
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002458:	f7ff fb36 	bl	8001ac8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800245c:	4b57      	ldr	r3, [pc, #348]	; (80025bc <pvPortMalloc+0x170>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002464:	f000 f90c 	bl	8002680 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002468:	4b55      	ldr	r3, [pc, #340]	; (80025c0 <pvPortMalloc+0x174>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 808c 	bne.w	800258e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01c      	beq.n	80024b6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800247c:	2208      	movs	r2, #8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	2b00      	cmp	r3, #0
 800248c:	d013      	beq.n	80024b6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f023 0307 	bic.w	r3, r3, #7
 8002494:	3308      	adds	r3, #8
 8002496:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <pvPortMalloc+0x6a>
	__asm volatile
 80024a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a6:	f383 8811 	msr	BASEPRI, r3
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e7fe      	b.n	80024b4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d068      	beq.n	800258e <pvPortMalloc+0x142>
 80024bc:	4b41      	ldr	r3, [pc, #260]	; (80025c4 <pvPortMalloc+0x178>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d863      	bhi.n	800258e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80024c6:	4b40      	ldr	r3, [pc, #256]	; (80025c8 <pvPortMalloc+0x17c>)
 80024c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80024ca:	4b3f      	ldr	r3, [pc, #252]	; (80025c8 <pvPortMalloc+0x17c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024d0:	e004      	b.n	80024dc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d903      	bls.n	80024ee <pvPortMalloc+0xa2>
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f1      	bne.n	80024d2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80024ee:	4b33      	ldr	r3, [pc, #204]	; (80025bc <pvPortMalloc+0x170>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d04a      	beq.n	800258e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2208      	movs	r2, #8
 80024fe:	4413      	add	r3, r2
 8002500:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	1ad2      	subs	r2, r2, r3
 8002512:	2308      	movs	r3, #8
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	429a      	cmp	r2, r3
 8002518:	d91e      	bls.n	8002558 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800251a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4413      	add	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	2b00      	cmp	r3, #0
 800252a:	d009      	beq.n	8002540 <pvPortMalloc+0xf4>
 800252c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002530:	f383 8811 	msr	BASEPRI, r3
 8002534:	f3bf 8f6f 	isb	sy
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	e7fe      	b.n	800253e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	1ad2      	subs	r2, r2, r3
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002552:	69b8      	ldr	r0, [r7, #24]
 8002554:	f000 f8f6 	bl	8002744 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <pvPortMalloc+0x178>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	4a18      	ldr	r2, [pc, #96]	; (80025c4 <pvPortMalloc+0x178>)
 8002564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002566:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <pvPortMalloc+0x178>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <pvPortMalloc+0x180>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d203      	bcs.n	800257a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <pvPortMalloc+0x178>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a15      	ldr	r2, [pc, #84]	; (80025cc <pvPortMalloc+0x180>)
 8002578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <pvPortMalloc+0x174>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	431a      	orrs	r2, r3
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800258e:	f7ff faa9 	bl	8001ae4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	2b00      	cmp	r3, #0
 800259a:	d009      	beq.n	80025b0 <pvPortMalloc+0x164>
 800259c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a0:	f383 8811 	msr	BASEPRI, r3
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	e7fe      	b.n	80025ae <pvPortMalloc+0x162>
	return pvReturn;
 80025b0:	69fb      	ldr	r3, [r7, #28]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3728      	adds	r7, #40	; 0x28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000d68 	.word	0x20000d68
 80025c0:	20000d74 	.word	0x20000d74
 80025c4:	20000d6c 	.word	0x20000d6c
 80025c8:	20000d60 	.word	0x20000d60
 80025cc:	20000d70 	.word	0x20000d70

080025d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d046      	beq.n	8002670 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80025e2:	2308      	movs	r3, #8
 80025e4:	425b      	negs	r3, r3
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4413      	add	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	4b20      	ldr	r3, [pc, #128]	; (8002678 <vPortFree+0xa8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <vPortFree+0x42>
 80025fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002602:	f383 8811 	msr	BASEPRI, r3
 8002606:	f3bf 8f6f 	isb	sy
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	e7fe      	b.n	8002610 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <vPortFree+0x5e>
 800261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261e:	f383 8811 	msr	BASEPRI, r3
 8002622:	f3bf 8f6f 	isb	sy
 8002626:	f3bf 8f4f 	dsb	sy
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	e7fe      	b.n	800262c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <vPortFree+0xa8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d019      	beq.n	8002670 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d115      	bne.n	8002670 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <vPortFree+0xa8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	43db      	mvns	r3, r3
 800264e:	401a      	ands	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002654:	f7ff fa38 	bl	8001ac8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4b07      	ldr	r3, [pc, #28]	; (800267c <vPortFree+0xac>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4413      	add	r3, r2
 8002662:	4a06      	ldr	r2, [pc, #24]	; (800267c <vPortFree+0xac>)
 8002664:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002666:	6938      	ldr	r0, [r7, #16]
 8002668:	f000 f86c 	bl	8002744 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800266c:	f7ff fa3a 	bl	8001ae4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002670:	bf00      	nop
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000d74 	.word	0x20000d74
 800267c:	20000d6c 	.word	0x20000d6c

08002680 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002686:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800268a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <prvHeapInit+0xac>)
 800268e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00c      	beq.n	80026b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3307      	adds	r3, #7
 800269e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f023 0307 	bic.w	r3, r3, #7
 80026a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	4a1f      	ldr	r2, [pc, #124]	; (800272c <prvHeapInit+0xac>)
 80026b0:	4413      	add	r3, r2
 80026b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80026b8:	4a1d      	ldr	r2, [pc, #116]	; (8002730 <prvHeapInit+0xb0>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80026be:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <prvHeapInit+0xb0>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	4413      	add	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80026cc:	2208      	movs	r2, #8
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0307 	bic.w	r3, r3, #7
 80026da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a15      	ldr	r2, [pc, #84]	; (8002734 <prvHeapInit+0xb4>)
 80026e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <prvHeapInit+0xb4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2200      	movs	r2, #0
 80026e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <prvHeapInit+0xb4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	1ad2      	subs	r2, r2, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <prvHeapInit+0xb4>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <prvHeapInit+0xb8>)
 800270e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a09      	ldr	r2, [pc, #36]	; (800273c <prvHeapInit+0xbc>)
 8002716:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <prvHeapInit+0xc0>)
 800271a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800271e:	601a      	str	r2, [r3, #0]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000160 	.word	0x20000160
 8002730:	20000d60 	.word	0x20000d60
 8002734:	20000d68 	.word	0x20000d68
 8002738:	20000d70 	.word	0x20000d70
 800273c:	20000d6c 	.word	0x20000d6c
 8002740:	20000d74 	.word	0x20000d74

08002744 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800274c:	4b27      	ldr	r3, [pc, #156]	; (80027ec <prvInsertBlockIntoFreeList+0xa8>)
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e002      	b.n	8002758 <prvInsertBlockIntoFreeList+0x14>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	429a      	cmp	r2, r3
 8002760:	d8f7      	bhi.n	8002752 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	4413      	add	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	d108      	bne.n	8002786 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	441a      	add	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	441a      	add	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d118      	bne.n	80027cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <prvInsertBlockIntoFreeList+0xac>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d00d      	beq.n	80027c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	441a      	add	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e008      	b.n	80027d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <prvInsertBlockIntoFreeList+0xac>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	e003      	b.n	80027d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d002      	beq.n	80027e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	20000d60 	.word	0x20000d60
 80027f0:	20000d68 	.word	0x20000d68

080027f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <MX_DMA_Init+0x48>)
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	4a0f      	ldr	r2, [pc, #60]	; (800283c <MX_DMA_Init+0x48>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6153      	str	r3, [r2, #20]
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <MX_DMA_Init+0x48>)
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2105      	movs	r1, #5
 8002816:	200c      	movs	r0, #12
 8002818:	f7fd fdd3 	bl	80003c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800281c:	200c      	movs	r0, #12
 800281e:	f7fd fdec 	bl	80003fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2105      	movs	r1, #5
 8002826:	200d      	movs	r0, #13
 8002828:	f7fd fdcb 	bl	80003c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800282c:	200d      	movs	r0, #13
 800282e:	f7fd fde4 	bl	80003fa <HAL_NVIC_EnableIRQ>

}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000

08002840 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4a06      	ldr	r2, [pc, #24]	; (8002868 <vApplicationGetIdleTaskMemory+0x28>)
 8002850:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	4a05      	ldr	r2, [pc, #20]	; (800286c <vApplicationGetIdleTaskMemory+0x2c>)
 8002856:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	20000d78 	.word	0x20000d78
 800286c:	20000dcc 	.word	0x20000dcc

08002870 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002870:	b5b0      	push	{r4, r5, r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <MX_FREERTOS_Init+0x30>)
 8002878:	1d3c      	adds	r4, r7, #4
 800287a:	461d      	mov	r5, r3
 800287c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800287e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002880:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002884:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002888:	1d3b      	adds	r3, r7, #4
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe fdf3 	bl	8001478 <osThreadCreate>
 8002892:	4602      	mov	r2, r0
 8002894:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <MX_FREERTOS_Init+0x34>)
 8002896:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002898:	bf00      	nop
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bdb0      	pop	{r4, r5, r7, pc}
 80028a0:	08002d80 	.word	0x08002d80
 80028a4:	20000fd0 	.word	0x20000fd0

080028a8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80028b0:	2001      	movs	r0, #1
 80028b2:	f7fe fe2d 	bl	8001510 <osDelay>
 80028b6:	e7fb      	b.n	80028b0 <StartDefaultTask+0x8>

080028b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028be:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <MX_GPIO_Init+0x70>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	4a19      	ldr	r2, [pc, #100]	; (8002928 <MX_GPIO_Init+0x70>)
 80028c4:	f043 0310 	orr.w	r3, r3, #16
 80028c8:	6193      	str	r3, [r2, #24]
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <MX_GPIO_Init+0x70>)
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <MX_GPIO_Init+0x70>)
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	4a13      	ldr	r2, [pc, #76]	; (8002928 <MX_GPIO_Init+0x70>)
 80028dc:	f043 0320 	orr.w	r3, r3, #32
 80028e0:	6193      	str	r3, [r2, #24]
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <MX_GPIO_Init+0x70>)
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ee:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <MX_GPIO_Init+0x70>)
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <MX_GPIO_Init+0x70>)
 80028f4:	f043 0308 	orr.w	r3, r3, #8
 80028f8:	6193      	str	r3, [r2, #24]
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <MX_GPIO_Init+0x70>)
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <MX_GPIO_Init+0x70>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	4a07      	ldr	r2, [pc, #28]	; (8002928 <MX_GPIO_Init+0x70>)
 800290c:	f043 0304 	orr.w	r3, r3, #4
 8002910:	6193      	str	r3, [r2, #24]
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <MX_GPIO_Init+0x70>)
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	683b      	ldr	r3, [r7, #0]

}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	40021000 	.word	0x40021000

0800292c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002930:	f7fd fc0e 	bl	8000150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002934:	f000 f80b 	bl	800294e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002938:	f7ff ffbe 	bl	80028b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800293c:	f7ff ff5a 	bl	80027f4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002940:	f000 f8ec 	bl	8002b1c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8002944:	f7ff ff94 	bl	8002870 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002948:	f7fe fd8f 	bl	800146a <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800294c:	e7fe      	b.n	800294c <main+0x20>

0800294e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b090      	sub	sp, #64	; 0x40
 8002952:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002954:	f107 0318 	add.w	r3, r7, #24
 8002958:	2228      	movs	r2, #40	; 0x28
 800295a:	2100      	movs	r1, #0
 800295c:	4618      	mov	r0, r3
 800295e:	f000 f9e7 	bl	8002d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002970:	2302      	movs	r3, #2
 8002972:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002974:	2301      	movs	r3, #1
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002978:	2310      	movs	r3, #16
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800297c:	2300      	movs	r3, #0
 800297e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002980:	f107 0318 	add.w	r3, r7, #24
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe f80d 	bl	80009a4 <HAL_RCC_OscConfig>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002990:	f000 f818 	bl	80029c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002994:	230f      	movs	r3, #15
 8002996:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002998:	2300      	movs	r3, #0
 800299a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe fa79 	bl	8000ea4 <HAL_RCC_ClockConfig>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80029b8:	f000 f804 	bl	80029c4 <Error_Handler>
  }
}
 80029bc:	bf00      	nop
 80029be:	3740      	adds	r7, #64	; 0x40
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <HAL_MspInit+0x68>)
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	4a17      	ldr	r2, [pc, #92]	; (8002a38 <HAL_MspInit+0x68>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6193      	str	r3, [r2, #24]
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <HAL_MspInit+0x68>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <HAL_MspInit+0x68>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	4a11      	ldr	r2, [pc, #68]	; (8002a38 <HAL_MspInit+0x68>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f8:	61d3      	str	r3, [r2, #28]
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <HAL_MspInit+0x68>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	210f      	movs	r1, #15
 8002a0a:	f06f 0001 	mvn.w	r0, #1
 8002a0e:	f7fd fcd8 	bl	80003c2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a12:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <HAL_MspInit+0x6c>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <HAL_MspInit+0x6c>)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40010000 	.word	0x40010000

08002a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a50:	e7fe      	b.n	8002a50 <HardFault_Handler+0x4>

08002a52 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a56:	e7fe      	b.n	8002a56 <MemManage_Handler+0x4>

08002a58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a5c:	e7fe      	b.n	8002a5c <BusFault_Handler+0x4>

08002a5e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a62:	e7fe      	b.n	8002a62 <UsageFault_Handler+0x4>

08002a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a74:	f7fd fbb2 	bl	80001dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002a78:	f7ff fabc 	bl	8001ff4 <xTaskGetSchedulerState>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d001      	beq.n	8002a86 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002a82:	f7ff fca1 	bl	80023c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002a90:	4802      	ldr	r0, [pc, #8]	; (8002a9c <DMA1_Channel2_IRQHandler+0x10>)
 8002a92:	f7fd fd27 	bl	80004e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20001058 	.word	0x20001058

08002aa0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002aa4:	4802      	ldr	r0, [pc, #8]	; (8002ab0 <DMA1_Channel3_IRQHandler+0x10>)
 8002aa6:	f7fd fd1d 	bl	80004e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000fd4 	.word	0x20000fd4

08002ab4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002ab8:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <SystemInit+0x5c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <SystemInit+0x5c>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <SystemInit+0x5c>)
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4911      	ldr	r1, [pc, #68]	; (8002b10 <SystemInit+0x5c>)
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <SystemInit+0x60>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <SystemInit+0x5c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0e      	ldr	r2, [pc, #56]	; (8002b10 <SystemInit+0x5c>)
 8002ad6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ade:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <SystemInit+0x5c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <SystemInit+0x5c>)
 8002ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <SystemInit+0x5c>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <SystemInit+0x5c>)
 8002af2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002af6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <SystemInit+0x5c>)
 8002afa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002afe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <SystemInit+0x64>)
 8002b02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b06:	609a      	str	r2, [r3, #8]
#endif 
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	40021000 	.word	0x40021000
 8002b14:	f8ff0000 	.word	0xf8ff0000
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002b20:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <MX_USART3_UART_Init+0x4c>)
 8002b22:	4a12      	ldr	r2, [pc, #72]	; (8002b6c <MX_USART3_UART_Init+0x50>)
 8002b24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <MX_USART3_UART_Init+0x4c>)
 8002b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <MX_USART3_UART_Init+0x4c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <MX_USART3_UART_Init+0x4c>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <MX_USART3_UART_Init+0x4c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b40:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <MX_USART3_UART_Init+0x4c>)
 8002b42:	220c      	movs	r2, #12
 8002b44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b46:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <MX_USART3_UART_Init+0x4c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <MX_USART3_UART_Init+0x4c>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8002b52:	4805      	ldr	r0, [pc, #20]	; (8002b68 <MX_USART3_UART_Init+0x4c>)
 8002b54:	f7fe fb42 	bl	80011dc <HAL_HalfDuplex_Init>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b5e:	f7ff ff31 	bl	80029c4 <Error_Handler>
  }

}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20001018 	.word	0x20001018
 8002b6c:	40004800 	.word	0x40004800

08002b70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 0310 	add.w	r3, r7, #16
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a3d      	ldr	r2, [pc, #244]	; (8002c80 <HAL_UART_MspInit+0x110>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d172      	bne.n	8002c76 <HAL_UART_MspInit+0x106>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b90:	4b3c      	ldr	r3, [pc, #240]	; (8002c84 <HAL_UART_MspInit+0x114>)
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	4a3b      	ldr	r2, [pc, #236]	; (8002c84 <HAL_UART_MspInit+0x114>)
 8002b96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b9a:	61d3      	str	r3, [r2, #28]
 8002b9c:	4b39      	ldr	r3, [pc, #228]	; (8002c84 <HAL_UART_MspInit+0x114>)
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba8:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <HAL_UART_MspInit+0x114>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	4a35      	ldr	r2, [pc, #212]	; (8002c84 <HAL_UART_MspInit+0x114>)
 8002bae:	f043 0308 	orr.w	r3, r3, #8
 8002bb2:	6193      	str	r3, [r2, #24]
 8002bb4:	4b33      	ldr	r3, [pc, #204]	; (8002c84 <HAL_UART_MspInit+0x114>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bc6:	2312      	movs	r3, #18
 8002bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bce:	f107 0310 	add.w	r3, r7, #16
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	482c      	ldr	r0, [pc, #176]	; (8002c88 <HAL_UART_MspInit+0x118>)
 8002bd6:	f7fd fd8b 	bl	80006f0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002bda:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <HAL_UART_MspInit+0x11c>)
 8002bdc:	4a2c      	ldr	r2, [pc, #176]	; (8002c90 <HAL_UART_MspInit+0x120>)
 8002bde:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002be0:	4b2a      	ldr	r3, [pc, #168]	; (8002c8c <HAL_UART_MspInit+0x11c>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002be6:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <HAL_UART_MspInit+0x11c>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bec:	4b27      	ldr	r3, [pc, #156]	; (8002c8c <HAL_UART_MspInit+0x11c>)
 8002bee:	2280      	movs	r2, #128	; 0x80
 8002bf0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bf2:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <HAL_UART_MspInit+0x11c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bf8:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <HAL_UART_MspInit+0x11c>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002bfe:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <HAL_UART_MspInit+0x11c>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c04:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_UART_MspInit+0x11c>)
 8002c06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002c0c:	481f      	ldr	r0, [pc, #124]	; (8002c8c <HAL_UART_MspInit+0x11c>)
 8002c0e:	f7fd fc0f 	bl	8000430 <HAL_DMA_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 8002c18:	f7ff fed4 	bl	80029c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <HAL_UART_MspInit+0x11c>)
 8002c20:	635a      	str	r2, [r3, #52]	; 0x34
 8002c22:	4a1a      	ldr	r2, [pc, #104]	; (8002c8c <HAL_UART_MspInit+0x11c>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002c28:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <HAL_UART_MspInit+0x124>)
 8002c2a:	4a1b      	ldr	r2, [pc, #108]	; (8002c98 <HAL_UART_MspInit+0x128>)
 8002c2c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c2e:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_UART_MspInit+0x124>)
 8002c30:	2210      	movs	r2, #16
 8002c32:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c34:	4b17      	ldr	r3, [pc, #92]	; (8002c94 <HAL_UART_MspInit+0x124>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c3a:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_UART_MspInit+0x124>)
 8002c3c:	2280      	movs	r2, #128	; 0x80
 8002c3e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c40:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <HAL_UART_MspInit+0x124>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c46:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <HAL_UART_MspInit+0x124>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002c4c:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <HAL_UART_MspInit+0x124>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <HAL_UART_MspInit+0x124>)
 8002c54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c58:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002c5a:	480e      	ldr	r0, [pc, #56]	; (8002c94 <HAL_UART_MspInit+0x124>)
 8002c5c:	f7fd fbe8 	bl	8000430 <HAL_DMA_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8002c66:	f7ff fead 	bl	80029c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <HAL_UART_MspInit+0x124>)
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c70:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <HAL_UART_MspInit+0x124>)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002c76:	bf00      	nop
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40004800 	.word	0x40004800
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40010c00 	.word	0x40010c00
 8002c8c:	20000fd4 	.word	0x20000fd4
 8002c90:	40020030 	.word	0x40020030
 8002c94:	20001058 	.word	0x20001058
 8002c98:	4002001c 	.word	0x4002001c

08002c9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002c9c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002c9e:	e003      	b.n	8002ca8 <LoopCopyDataInit>

08002ca0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002ca2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ca4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002ca6:	3104      	adds	r1, #4

08002ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ca8:	480a      	ldr	r0, [pc, #40]	; (8002cd4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002caa:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002cac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002cae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002cb0:	d3f6      	bcc.n	8002ca0 <CopyDataInit>
  ldr r2, =_sbss
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002cb4:	e002      	b.n	8002cbc <LoopFillZerobss>

08002cb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002cb8:	f842 3b04 	str.w	r3, [r2], #4

08002cbc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002cbe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002cc0:	d3f9      	bcc.n	8002cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cc2:	f7ff fef7 	bl	8002ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cc6:	f000 f80f 	bl	8002ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cca:	f7ff fe2f 	bl	800292c <main>
  bx lr
 8002cce:	4770      	bx	lr
  ldr r3, =_sidata
 8002cd0:	08002dbc 	.word	0x08002dbc
  ldr r0, =_sdata
 8002cd4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002cd8:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8002cdc:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8002ce0:	2000109c 	.word	0x2000109c

08002ce4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ce4:	e7fe      	b.n	8002ce4 <ADC1_2_IRQHandler>
	...

08002ce8 <__libc_init_array>:
 8002ce8:	b570      	push	{r4, r5, r6, lr}
 8002cea:	2500      	movs	r5, #0
 8002cec:	4e0c      	ldr	r6, [pc, #48]	; (8002d20 <__libc_init_array+0x38>)
 8002cee:	4c0d      	ldr	r4, [pc, #52]	; (8002d24 <__libc_init_array+0x3c>)
 8002cf0:	1ba4      	subs	r4, r4, r6
 8002cf2:	10a4      	asrs	r4, r4, #2
 8002cf4:	42a5      	cmp	r5, r4
 8002cf6:	d109      	bne.n	8002d0c <__libc_init_array+0x24>
 8002cf8:	f000 f822 	bl	8002d40 <_init>
 8002cfc:	2500      	movs	r5, #0
 8002cfe:	4e0a      	ldr	r6, [pc, #40]	; (8002d28 <__libc_init_array+0x40>)
 8002d00:	4c0a      	ldr	r4, [pc, #40]	; (8002d2c <__libc_init_array+0x44>)
 8002d02:	1ba4      	subs	r4, r4, r6
 8002d04:	10a4      	asrs	r4, r4, #2
 8002d06:	42a5      	cmp	r5, r4
 8002d08:	d105      	bne.n	8002d16 <__libc_init_array+0x2e>
 8002d0a:	bd70      	pop	{r4, r5, r6, pc}
 8002d0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d10:	4798      	blx	r3
 8002d12:	3501      	adds	r5, #1
 8002d14:	e7ee      	b.n	8002cf4 <__libc_init_array+0xc>
 8002d16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d1a:	4798      	blx	r3
 8002d1c:	3501      	adds	r5, #1
 8002d1e:	e7f2      	b.n	8002d06 <__libc_init_array+0x1e>
 8002d20:	08002db4 	.word	0x08002db4
 8002d24:	08002db4 	.word	0x08002db4
 8002d28:	08002db4 	.word	0x08002db4
 8002d2c:	08002db8 	.word	0x08002db8

08002d30 <memset>:
 8002d30:	4603      	mov	r3, r0
 8002d32:	4402      	add	r2, r0
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d100      	bne.n	8002d3a <memset+0xa>
 8002d38:	4770      	bx	lr
 8002d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d3e:	e7f9      	b.n	8002d34 <memset+0x4>

08002d40 <_init>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	bf00      	nop
 8002d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d46:	bc08      	pop	{r3}
 8002d48:	469e      	mov	lr, r3
 8002d4a:	4770      	bx	lr

08002d4c <_fini>:
 8002d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4e:	bf00      	nop
 8002d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d52:	bc08      	pop	{r3}
 8002d54:	469e      	mov	lr, r3
 8002d56:	4770      	bx	lr
